package com.mbeddr.cpp.gen.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import com.mbeddr.cpp.gen.behavior.IncludeCommandMaker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import com.mbeddr.cpp.gen.behavior.CppImplementationMaker;
import com.mbeddr.cpp.gen.behavior.HeaderMaker;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class QueriesGenerated {
  public static boolean baseMappingRule_Condition_6954321621752169066(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "module", false), "com.mbeddr.cpp.cext.structure.CppImplementationModule");
  }

  public static Object propertyMacro_GetPropertyValue_6954321621752202396(final IOperationContext operationContext, final PropertyMacroContext _context) {
    System.out.println("Reduction works!");
    return IncludeCommandMaker.getModuleHeaderName(SNodeOperations.as(SLinkOperations.getTarget(_context.getNode(), "module", false), "com.mbeddr.cpp.cext.structure.CppImplementationModule"));
  }

  public static Object propertyMacro_GetPropertyValue_2451009910645011915(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "\"" + SPropertyOperations.getString(_context.getNode(), "name") + ".h\"";
  }

  public static Object propertyMacro_GetPropertyValue_1250172204143434171(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_8456210691473874620(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name").toUpperCase() + "_H__";
  }

  public static Object propertyMacro_GetPropertyValue_2451009910642409430(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static SNode sourceNodeQuery_2451009910647296497(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return _context.getNode();
  }

  public static Iterable sourceNodesQuery_2451009910647246478(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "imports", true);
  }

  public static Iterable sourceNodesQuery_4097784605144104862(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return CppImplementationMaker.prepareCppContents(_context.getNode());
  }

  public static Iterable sourceNodesQuery_2451009910644896540(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return HeaderMaker.prepareHeaderContents(_context.getNode());
  }

  public static void mappingScript_CodeBlock_6954321621749583335(final IOperationContext operationContext, final MappingScriptContext _context) {
    System.out.println("Works!");
    ListSequence.fromList(SModelOperations.getNodes(_context.getModel(), "com.mbeddr.core.modules.structure.ModuleImport")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "module", false), "com.mbeddr.cpp.cext.structure.CppImplementationModule");
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNodeOperations.replaceWithAnother(it, IncludeCommandMaker.makeIncludeCommand(it));
      }
    });
  }
}
