package com.mbeddr.cpp.cext.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_NamespaceScopeType_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_NamespaceScopeType_InferenceRule() {
  }

  public void applyRule(final SNode nst, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      final SNode innertype = typeCheckingContext.typeOf(SLinkOperations.getTarget(nst, "inner", true), "r:04ce5b7d-e3b0-4c34-ba0f-d2d0c0e6c99d(com.mbeddr.cpp.cext.typesystem)", "716812873802164055", true);
      typeCheckingContext.whenConcrete(innertype, new Runnable() {
        public void run() {
          {
            SNode _nodeToCheck_1029348928467 = nst;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:04ce5b7d-e3b0-4c34-ba0f-d2d0c0e6c99d(com.mbeddr.cpp.cext.typesystem)", "716812873802164109", 0, null);
            typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:04ce5b7d-e3b0-4c34-ba0f-d2d0c0e6c99d(com.mbeddr.cpp.cext.typesystem)", "716812873802164086", true), (SNode) typeCheckingContext.getExpandedNode(innertype), _info_12389875345);
          }
        }
      }, "r:04ce5b7d-e3b0-4c34-ba0f-d2d0c0e6c99d(com.mbeddr.cpp.cext.typesystem)", "716812873802164050", false, false);
    }
  }

  public String getApplicableConceptFQName() {
    return "com.mbeddr.cpp.cext.structure.NamespaceScopeType";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return true;
  }
}
