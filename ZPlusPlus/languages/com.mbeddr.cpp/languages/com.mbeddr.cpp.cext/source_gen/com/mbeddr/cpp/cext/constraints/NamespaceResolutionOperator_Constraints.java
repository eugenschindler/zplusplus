package com.mbeddr.cpp.cext.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Set;
import com.mbeddr.core.modules.behavior.Module_Behavior;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SNodePointer;

public class NamespaceResolutionOperator_Constraints extends BaseConstraintsDescriptor {
  public NamespaceResolutionOperator_Constraints() {
    super("com.mbeddr.cpp.cext.structure.NamespaceResolutionOperator");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("namespaceProvider", new BaseReferenceConstraintsDescriptor("namespaceProvider", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            SNode parentModule = SNodeOperations.getAncestor(_context.getReferenceNode(), "com.mbeddr.cpp.cext.structure.CppImplementationModule", false, false);

            Set<SNode> searchModules = Module_Behavior.call_getAllImportedModules_3562155621519641401(parentModule);
            List<SNode> res = new ArrayList<SNode>();

            ArrayList<String> usedNames = new ArrayList();

            for (SNode namespace : ListSequence.fromList(SNodeOperations.getDescendants(parentModule, "com.mbeddr.cpp.cext.structure.INamespaceProvider", false, new String[]{}))) {

              boolean add = true;

              for (String name : usedNames) {
                if (name.contentEquals(SPropertyOperations.getString(namespace, "name"))) {
                  add = false;
                  break;
                }
              }

              if (add) {
                usedNames.add(SPropertyOperations.getString(namespace, "name"));
                ListSequence.fromList(res).addElement(namespace);
              }

            }


            for (SNode module : SetSequence.fromSet(searchModules)) {
              for (SNode namespace : ListSequence.fromList(SNodeOperations.getDescendants(module, "com.mbeddr.cpp.cext.structure.INamespaceProvider", false, new String[]{}))) {
                boolean add = true;

                for (String name : usedNames) {
                  if (name.contentEquals(SPropertyOperations.getString(namespace, "name"))) {
                    add = false;
                    break;
                  }
                }

                if (add) {
                  usedNames.add(SPropertyOperations.getString(namespace, "name"));
                  ListSequence.fromList(res).addElement(namespace);
                }
              }
            }

            return res;
          }

          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_4ml88h_a0a1a0a0a1a0b0a1a1;
          }
        };
      }
    });
    references.put("namespaceMember", new BaseReferenceConstraintsDescriptor("namespaceMember", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            NamespaceResolutionOperatorDebug.debug("In constraints for NewNROperator");

            NamespaceResolutionOperatorDebug.debug("Context Node: " + _context.getContextNode());
            NamespaceResolutionOperatorDebug.debug("Reference Node: " + _context.getReferenceNode());
            NamespaceResolutionOperatorDebug.debug("Link Target: " + _context.getLinkTarget());
            NamespaceResolutionOperatorDebug.debug("Enclosing Node" + ": " + _context.getEnclosingNode());
            NamespaceResolutionOperatorDebug.debug("Containing Link: " + _context.getContainingLink());


            // REFACTOR TO RETURN REFERENCBLE BY NAMESPACE 
            return Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), SLinkOperations.getTarget(_context.getReferenceNode(), "namespaceProvider", false), "virtual_getAllContents_4315577761883431846", new Object[]{})).ofType(SNode.class);
          }

          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_4ml88h_a0a1a0a0a1a0b0a2a1;
          }
        };
      }
    });
    return references;
  }

  private static SNodePointer breakingNode_4ml88h_a0a1a0a0a1a0b0a1a1 = new SNodePointer("r:02dda90b-4ca6-4f14-acc8-da356fbc98b1(com.mbeddr.cpp.cext.constraints)", "2638982587293526432");
  private static SNodePointer breakingNode_4ml88h_a0a1a0a0a1a0b0a2a1 = new SNodePointer("r:02dda90b-4ca6-4f14-acc8-da356fbc98b1(com.mbeddr.cpp.cext.constraints)", "4315577761883459204");
}
