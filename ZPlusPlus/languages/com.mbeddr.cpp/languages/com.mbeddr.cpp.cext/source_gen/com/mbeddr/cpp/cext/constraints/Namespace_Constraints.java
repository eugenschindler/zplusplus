package com.mbeddr.cpp.cext.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class Namespace_Constraints extends BaseConstraintsDescriptor {
  public Namespace_Constraints() {
    super("com.mbeddr.cpp.cext.structure.Namespace");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("shortDescription", new BasePropertyConstraintsDescriptor("shortDescription", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "shortDescription";
        return BehaviorReflection.invokeVirtual(String.class, node, "virtual_shortDescriptionForCCMenu_5470497459578304992", new Object[]{});
      }
    });
    properties.put("name", new BasePropertyConstraintsDescriptor("name", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "name";
        if (SPropertyOperations.getBoolean(node, "anonymous")) {
          return "<anonymous>";
        }
        return SPropertyOperations.getString(node, "name");
      }

      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "name";
        if (SPropertyOperations.getBoolean(node, "anonymous")) {
          return true;
        }
        return CppNamingHelper.isNameValid((SPropertyOperations.getString(propertyValue)));
      }
    });
    return properties;
  }
}
