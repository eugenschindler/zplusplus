package com.mbeddr.cpp.cext.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_NewNamespaceResolutionOperator_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_NewNamespaceResolutionOperator_InferenceRule() {
  }

  public void applyRule(final SNode nro, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode classType = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.ClassifierType", null);
    SLinkOperations.setTarget(classType, "cls", SNodeOperations.as(SLinkOperations.getTarget(nro, "namespaceMember", false), "com.mbeddr.cpp.classes.structure.ClassDeclaration"), false);
    NamespaceTypeSystemDebug.debug("Giving type " + classType + " to " + nro);
    {
      SNode _nodeToCheck_1029348928467 = nro;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:04ce5b7d-e3b0-4c34-ba0f-d2d0c0e6c99d(com.mbeddr.cpp.cext.typesystem)", "4315577761883482070", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:04ce5b7d-e3b0-4c34-ba0f-d2d0c0e6c99d(com.mbeddr.cpp.cext.typesystem)", "4315577761883482007", true), (SNode) classType, _info_12389875345);
    }
  }

  public String getApplicableConceptFQName() {
    return "com.mbeddr.cpp.cext.structure.NamespaceResolutionOperator";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return true;
  }
}
