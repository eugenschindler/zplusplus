package com.mbeddr.cpp.cext.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_ReferenceType_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_ReferenceType_NonTypesystemRule() {
  }

  public void applyRule(final SNode rt, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode p = SNodeOperations.getParent(rt);

    if (SNodeOperations.isInstanceOf(p, "com.mbeddr.cpp.classes.structure.OperatorOverloadingDeclaration") || SNodeOperations.isInstanceOf(p, "com.mbeddr.cpp.classes.structure.MethodImplementation")) {
      // Fine, met often there 
      return;
    }

    if (SNodeOperations.isInstanceOf(p, "com.mbeddr.core.modules.structure.IArgumentLike") || SNodeOperations.isInstanceOf(p, "com.mbeddr.core.statements.structure.LocalVariableDeclaration")) {
      if (SNodeOperations.isInstanceOf(p, "com.mbeddr.core.statements.structure.LocalVariableDeclaration") && SLinkOperations.getTarget(SNodeOperations.cast(p, "com.mbeddr.core.statements.structure.LocalVariableDeclaration"), "init", true) == null) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(p, "initialization required", "r:04ce5b7d-e3b0-4c34-ba0f-d2d0c0e6c99d(com.mbeddr.cpp.cext.typesystem)", "610576951245970930", null, errorTarget);
        }
      }

    } else if (SNodeOperations.isInstanceOf(p, "com.mbeddr.cpp.classes.structure.AbstractMethodDeclaration")) {
      // fine 
      return;
    } else {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(rt, "reference type cannot be used here", "r:04ce5b7d-e3b0-4c34-ba0f-d2d0c0e6c99d(com.mbeddr.cpp.cext.typesystem)", "7661331924647318981", null, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "com.mbeddr.cpp.cext.structure.ReferenceType";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
