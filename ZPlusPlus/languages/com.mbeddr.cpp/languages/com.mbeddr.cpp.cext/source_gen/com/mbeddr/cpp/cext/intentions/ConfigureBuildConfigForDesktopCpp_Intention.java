package com.mbeddr.cpp.cext.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ConfigureBuildConfigForDesktopCpp_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public ConfigureBuildConfigForDesktopCpp_Intention() {
  }

  public String getConcept() {
    return "com.mbeddr.core.buildconfig.structure.BuildConfiguration";
  }

  public String getPresentation() {
    return "ConfigureBuildConfigForDesktopCpp";
  }

  public String getPersistentStateKey() {
    return "com.mbeddr.cpp.cext.intentions.ConfigureBuildConfigForDesktopCpp_Intention";
  }

  public String getLanguageFqName() {
    return "com.mbeddr.cpp.cext";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:ab2eb74f-bdf7-4f08-839c-11455dff83d4(com.mbeddr.cpp.cext.intentions)", "8456210691477846010");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ConfigureBuildConfigForDesktopCpp_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Configure C++ executable";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode platform = SConceptOperations.createNewNode("com.mbeddr.core.buildconfig.structure.DesktopPlatform", null);
      SLinkOperations.setTarget(node, "target", platform, true);

      SPropertyOperations.set(platform, "compiler", "g++");
      SPropertyOperations.set(platform, "compilerOptions", " ");
      SPropertyOperations.set(platform, "debugOptions", " ");

      final SNode executable = SConceptOperations.createNewNode("com.mbeddr.core.buildconfig.structure.Executable", null);
      SPropertyOperations.set(executable, "name", "main");
      SPropertyOperations.set(executable, "isTest", "" + (false));

      ListSequence.fromList(SLinkOperations.getTargets(node, "binaries", true)).addElement(executable);

      ListSequence.fromList(SModelOperations.getNodes(SNodeOperations.getModel(node), "com.mbeddr.core.modules.structure.Module")).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          ListSequence.fromList(SLinkOperations.getTargets(executable, "referencedModules", true)).addElement(ModuleRefMaker.fromModule(it));
        }
      });

    }

    public IntentionDescriptor getDescriptor() {
      return ConfigureBuildConfigForDesktopCpp_Intention.this;
    }
  }
}
