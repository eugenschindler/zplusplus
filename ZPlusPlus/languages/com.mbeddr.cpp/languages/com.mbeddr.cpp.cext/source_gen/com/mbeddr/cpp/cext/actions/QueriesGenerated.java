package com.mbeddr.cpp.cext.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import com.mbeddr.cpp.cext.behavior.NamespaceScopeExpr_Behavior;
import com.mbeddr.cpp.cext.behavior.NamespaceRefExpr_Behavior;

public class QueriesGenerated {
  public static List<SubstituteAction> sideTransform_ActionsFactory_Type_4157133445515664564(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.cext.structure.ReferenceType"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SNode m = SConceptOperations.createNewNode("com.mbeddr.cpp.cext.structure.ReferenceType", null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(), m);
        return SLinkOperations.setTarget(m, "baseType", _context.getSourceNode(), true);
      }

      public String getMatchingText(String pattern) {
        return "&";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.cext.structure.ReferenceType"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.cext.structure.ReferenceType"), null));
      }
    });
    return result;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_NamespaceType_3947421596134505544(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.cext.structure.NamespaceScopeType"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        NamespaceActionsDebug.debug("make Scope Type works");
        SNode nst = SConceptOperations.createNewNode("com.mbeddr.cpp.cext.structure.NamespaceScopeType", null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(), nst);
        SLinkOperations.setTarget(nst, "outer", _context.getSourceNode(), true);
        SLinkOperations.setTarget(nst, "inner", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.Type", null), true);
        return SLinkOperations.getTarget(nst, "inner", true);
      }

      public String getMatchingText(String pattern) {
        return "::";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.cext.structure.NamespaceScopeType"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.cext.structure.NamespaceScopeType"), null));
      }
    });
    return result;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_NamespaceRefExpr_2533033302498740794(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("com.mbeddr.core.statements.structure.LocalVariableDeclaration"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        NamespaceActionsDebug.debug("make RefExpr to Type works");
        SNode localVarDecl = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.LocalVariableDeclaration", null);
        SNodeOperations.replaceWithAnother(SNodeOperations.getAncestor(_context.getSourceNode(), "com.mbeddr.core.statements.structure.Statement", false, false), localVarDecl);
        SNode lastNamespaceScopeExprAncestor = ListSequence.fromList(SNodeOperations.getAncestors(_context.getSourceNode(), "com.mbeddr.cpp.cext.structure.NamespaceScopeExpr", false)).last();
        if (lastNamespaceScopeExprAncestor != null) {
          NamespaceActionsDebug.debug("converting ancestor");
          SLinkOperations.setTarget(localVarDecl, "type", NamespaceScopeExpr_Behavior.call_asType_2533033302498830784(lastNamespaceScopeExprAncestor), true);
        } else {
          NamespaceActionsDebug.debug("converting source node");
          SLinkOperations.setTarget(localVarDecl, "type", NamespaceRefExpr_Behavior.call_asClassType_2533033302498840653(_context.getSourceNode()), true);
        }
        return localVarDecl;
      }

      public String getMatchingText(String pattern) {
        return " ";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("com.mbeddr.core.statements.structure.LocalVariableDeclaration"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("com.mbeddr.core.statements.structure.LocalVariableDeclaration"), null));
      }
    });
    return result;
  }
}
