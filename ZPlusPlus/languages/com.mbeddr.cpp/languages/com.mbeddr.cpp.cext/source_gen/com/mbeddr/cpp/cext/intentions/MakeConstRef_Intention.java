package com.mbeddr.cpp.cext.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class MakeConstRef_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public MakeConstRef_Intention() {
  }

  public String getConcept() {
    return "com.mbeddr.core.expressions.structure.Type";
  }

  public String getPresentation() {
    return "MakeConstRef";
  }

  public String getPersistentStateKey() {
    return "com.mbeddr.cpp.cext.intentions.MakeConstRef_Intention";
  }

  public String getLanguageFqName() {
    return "com.mbeddr.cpp.cext";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.getAncestor(node, "com.mbeddr.cpp.cext.structure.CppImplementationModule", false, false) != null;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:ab2eb74f-bdf7-4f08-839c-11455dff83d4(com.mbeddr.cpp.cext.intentions)", "7494111203194303538");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new MakeConstRef_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Make Const Reference";
    }

    public void execute(final SNode node, final EditorContext editorContext) {

      if (SNodeOperations.isInstanceOf(node, "com.mbeddr.cpp.cext.structure.ReferenceType")) {
        SPropertyOperations.set(node, "const", "" + (true));
        return;
      }


      SNode refType = SConceptOperations.createNewNode("com.mbeddr.cpp.cext.structure.ReferenceType", null);
      SLinkOperations.setTarget(refType, "baseType", SNodeOperations.copyNode(node), true);
      SPropertyOperations.set(refType, "const", "" + (true));
      SNodeOperations.replaceWithAnother(node, refType);
    }

    public IntentionDescriptor getDescriptor() {
      return MakeConstRef_Intention.this;
    }
  }
}
