package com.mbeddr.cpp.cext.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Set;
import com.mbeddr.core.modules.behavior.Module_Behavior;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class Namespace_Behavior {
  public static void init(SNode thisNode) {
  }

  public static Iterable<SNode> virtual_getContents_8928893569897447072(SNode thisNode) {
    return SLinkOperations.getTargets(thisNode, "contents", true);
  }

  public static SNode virtual_getNamespaceProvider_3710575327008827950(SNode thisNode) {
    return thisNode;
  }

  public static Iterable<SNode> virtual_getAllContents_4315577761883431846(SNode thisNode) {
    SNode parentModule = SNodeOperations.getAncestor(thisNode, "com.mbeddr.cpp.cext.structure.CppImplementationModule", false, false);

    Set<SNode> searchModules = Module_Behavior.call_getAllImportedModules_3562155621519641401(parentModule);
    SetSequence.fromSet(searchModules).addElement(parentModule);
    List<SNode> res = new ArrayList<SNode>();

    // ! Namespaces from other included module by included by parents module modules are not here! 

    for (SNode module : SetSequence.fromSet(searchModules)) {
      for (SNode namespace : ListSequence.fromList(SNodeOperations.getDescendants(module, "com.mbeddr.cpp.cext.structure.INamespaceProvider", false, new String[]{}))) {
        if (SPropertyOperations.getString(namespace, "name").contentEquals(SPropertyOperations.getString(thisNode, "name"))) {
          ListSequence.fromList(res).addSequence(Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), namespace, "virtual_getContents_8928893569897447072", new Object[]{})));
        }
      }
    }

    return res;
  }

  public static Iterable<SNode> virtual_visibleContentsOfType_7139820346881179813(SNode thisNode, SNode targetConcept) {

    DebugNamespaceBehavior.debug("visible content of type is asked from namespace");

    List<SNode> res = new ArrayList<SNode>();

    for (SNode content : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "contents", true))) {
      if (SNodeOperations.isInstanceOf(content, NameUtil.nodeFQName(targetConcept))) {
        ListSequence.fromList(res).addElement(content);
      }
    }

    DebugNamespaceBehavior.debug("returning list " + res);

    return res;
  }

  public static String virtual_getFullNamespaceName_2981142171761304257(SNode thisNode) {

    return NSHelper.getNsFullName(thisNode);

  }

  public static boolean virtual_exportable_6584628407655574574(SAbstractConcept thisConcept) {
    return true;
  }
}
