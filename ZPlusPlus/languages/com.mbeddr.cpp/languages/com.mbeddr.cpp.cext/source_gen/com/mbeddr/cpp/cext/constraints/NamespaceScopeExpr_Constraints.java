package com.mbeddr.cpp.cext.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.SNodePointer;

public class NamespaceScopeExpr_Constraints extends BaseConstraintsDescriptor {
  public NamespaceScopeExpr_Constraints() {
    super("com.mbeddr.cpp.cext.structure.NamespaceScopeExpr");
  }

  @Override
  public boolean hasOwnCanBeParentMethod() {
    return true;
  }

  @Override
  public boolean canBeParent(SNode node, @Nullable SNode childNode, SNode childConcept, SNode link, IOperationContext operationContext, @Nullable CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAParent(node, childNode, childConcept, link, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeParentBreakingPoint);
    }

    return result;
  }

  public static boolean static_canBeAParent(SNode node, SNode childNode, SNode childConcept, SNode link, final IOperationContext operationContext) {
    return childConcept == SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.cext.structure.NamespaceRefExpr") || childConcept == SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.cext.structure.NamespaceScopeExpr") || SConceptOperations.isSubConceptOf(childConcept, "com.mbeddr.core.base.structure.IModuleContentRef");
  }

  private static SNodePointer canBeParentBreakingPoint = new SNodePointer("r:02dda90b-4ca6-4f14-acc8-da356fbc98b1(com.mbeddr.cpp.cext.constraints)", "3947421596133974922");
}
