package com.mbeddr.cpp.cext.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;

public class NamespaceType_Constraints extends BaseConstraintsDescriptor {
  public NamespaceType_Constraints() {
    super("com.mbeddr.cpp.cext.structure.NamespaceType");
  }

  @Override
  public boolean hasOwnCanBeChildMethod() {
    return true;
  }

  @Override
  public boolean canBeChild(@Nullable SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext, @Nullable final CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAChild(node, parentNode, link, childConcept, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
    }

    return result;
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("nsprovider", new BaseReferenceConstraintsDescriptor("nsprovider", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            if (SNodeOperations.isInstanceOf(_context.getEnclosingNode(), "com.mbeddr.cpp.cext.structure.NamespaceScopeType")) {
              if (_context.getContainingLink() == SLinkOperations.findLinkDeclaration("com.mbeddr.cpp.cext.structure.NamespaceScopeType", "outer")) {
                return Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), SNodeOperations.getAncestor(_context.getEnclosingNode(), "com.mbeddr.core.base.structure.IVisibleElementProvider", false, false), "virtual_visibleContentsOfType_7139820346881179813", new Object[]{SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.cext.structure.Namespace")})).where(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SNodeOperations.isInstanceOf(it, "com.mbeddr.cpp.cext.structure.INamespaceProvider");
                  }
                });
              } else {
                return Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), SNodeOperations.getAncestor(_context.getEnclosingNode(), "com.mbeddr.core.base.structure.IVisibleElementProvider", true, false), "virtual_visibleContentsOfType_7139820346881179813", new Object[]{SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.cext.structure.INamespaceProvider")})).where(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SNodeOperations.isInstanceOf(it, "com.mbeddr.cpp.cext.structure.INamespaceProvider");
                  }
                });
              }
            } else {
              return Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), SNodeOperations.getAncestor(_context.getEnclosingNode(), "com.mbeddr.core.base.structure.IVisibleElementProvider", true, false), "virtual_visibleContentsOfType_7139820346881179813", new Object[]{SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.cext.structure.INamespaceProvider")})).where(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SNodeOperations.isInstanceOf(it, "com.mbeddr.cpp.cext.structure.INamespaceProvider");
                }
              });
            }
          }

          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_gl4c8m_a0a1a0a0a1a0b0a1a3;
          }
        };
      }
    });
    return references;
  }

  public static boolean static_canBeAChild(SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(parentNode, "com.mbeddr.core.statements.structure.StatementList"));
  }

  private static SNodePointer canBeChildBreakingPoint = new SNodePointer("r:02dda90b-4ca6-4f14-acc8-da356fbc98b1(com.mbeddr.cpp.cext.constraints)", "2533033302498670578");
  private static SNodePointer breakingNode_gl4c8m_a0a1a0a0a1a0b0a1a3 = new SNodePointer("r:02dda90b-4ca6-4f14-acc8-da356fbc98b1(com.mbeddr.cpp.cext.constraints)", "2533033302498585049");
}
