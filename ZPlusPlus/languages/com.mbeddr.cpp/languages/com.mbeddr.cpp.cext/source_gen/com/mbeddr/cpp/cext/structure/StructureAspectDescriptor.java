package com.mbeddr.cpp.cext.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.CppImplementationModule").super_("com.mbeddr.core.modules.structure.ImplementationModule").parents("com.mbeddr.core.modules.structure.ImplementationModule", "com.mbeddr.core.modules.gen.structure.ICareAboutImportingMyself").create();
      case 1:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.CppStandardHeaderImport").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("com.mbeddr.core.base.structure.IIdentifierNamedConcept", "jetbrains.mps.lang.core.structure.BaseConcept").alias("C++ standard header", "something like <iostream>").create();
      case 2:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.ICppIdentifierNamedConcept").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.IResolveInfo").create();
      case 3:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.INamespaceProvider").interface_().parents("com.mbeddr.core.base.structure.IIdentifierNamedConcept", "com.mbeddr.core.base.structure.IVisibleElementProvider").create();
      case 4:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.INamespaceProviderReference").interface_().parents("com.mbeddr.cpp.cext.structure.ICppIdentifierNamedConcept").create();
      case 5:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.INamespaceScoper").interface_().parents("com.mbeddr.core.base.structure.IVisibleElementProvider").create();
      case 6:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.INestedNamespaceRef").interface_().references("nsprovider").create();
      case 7:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.IReferencableByNamespaceResolutionOperator").interface_().parents("com.mbeddr.cpp.cext.structure.ICppIdentifierNamedConcept").create();
      case 8:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.IRequiresCPPModule").interface_().create();
      case 9:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.Namespace").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.cpp.cext.structure.IRequiresCPPModule", "com.mbeddr.core.modules.structure.IModuleContent", "com.mbeddr.cpp.cext.structure.INamespaceProvider", "com.mbeddr.cpp.cext.structure.INamespaceProviderReference").properties("anonymous").children(new String[]{"contents"}, new boolean[]{true}).alias("namespace", "").create();
      case 10:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.NamespaceRefExpr").super_("com.mbeddr.core.expressions.structure.Expression").parents("com.mbeddr.core.expressions.structure.Expression", "com.mbeddr.cpp.cext.structure.INestedNamespaceRef").create();
      case 11:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.NamespaceResolutionOperator").super_("com.mbeddr.core.expressions.structure.Type").parents("com.mbeddr.core.expressions.structure.Type", "com.mbeddr.cpp.cext.structure.IRequiresCPPModule").references("namespaceMember", "namespaceProvider").alias("::", "").create();
      case 12:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.NamespaceResolutionReference").super_("com.mbeddr.core.expressions.structure.Expression").parents("com.mbeddr.core.expressions.structure.Expression", "com.mbeddr.cpp.cext.structure.INamespaceProviderReference").references("Namespace", "Subnamespace").alias(":)", "").create();
      case 13:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.NamespaceScopeExpr").super_("com.mbeddr.core.expressions.structure.BinaryExpression").parents("com.mbeddr.core.expressions.structure.BinaryExpression", "com.mbeddr.core.base.structure.IVisibleElementProvider", "com.mbeddr.core.expressions.structure.IStopReshuffling", "com.mbeddr.cpp.cext.structure.INamespaceScoper", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("::", "").create();
      case 14:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.NamespaceScopeType").super_("com.mbeddr.core.expressions.structure.Type").parents("com.mbeddr.core.expressions.structure.Type", "com.mbeddr.core.base.structure.IVisibleElementProvider", "com.mbeddr.cpp.cext.structure.INamespaceScoper", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"outer", "inner"}, new boolean[]{false, false}).alias("::", "").create();
      case 15:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.NamespaceType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.cpp.cext.structure.INestedNamespaceRef").create();
      case 16:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.cext.structure.ReferenceType").super_("com.mbeddr.core.expressions.structure.Type").parents("com.mbeddr.core.expressions.structure.Type").children(new String[]{"baseType"}, new boolean[]{false}).create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }

  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"com.mbeddr.cpp.cext.structure.CppImplementationModule", "com.mbeddr.cpp.cext.structure.CppStandardHeaderImport", "com.mbeddr.cpp.cext.structure.ICppIdentifierNamedConcept", "com.mbeddr.cpp.cext.structure.INamespaceProvider", "com.mbeddr.cpp.cext.structure.INamespaceProviderReference", "com.mbeddr.cpp.cext.structure.INamespaceScoper", "com.mbeddr.cpp.cext.structure.INestedNamespaceRef", "com.mbeddr.cpp.cext.structure.IReferencableByNamespaceResolutionOperator", "com.mbeddr.cpp.cext.structure.IRequiresCPPModule", "com.mbeddr.cpp.cext.structure.Namespace", "com.mbeddr.cpp.cext.structure.NamespaceRefExpr", "com.mbeddr.cpp.cext.structure.NamespaceResolutionOperator", "com.mbeddr.cpp.cext.structure.NamespaceResolutionReference", "com.mbeddr.cpp.cext.structure.NamespaceScopeExpr", "com.mbeddr.cpp.cext.structure.NamespaceScopeType", "com.mbeddr.cpp.cext.structure.NamespaceType", "com.mbeddr.cpp.cext.structure.ReferenceType"};
}
