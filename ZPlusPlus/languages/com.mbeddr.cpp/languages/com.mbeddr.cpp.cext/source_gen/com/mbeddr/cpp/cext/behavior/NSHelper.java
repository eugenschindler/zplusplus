package com.mbeddr.cpp.cext.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.ArrayList;
import com.mbeddr.core.base.behavior.IIdentifierNamedConcept_Behavior;

public class NSHelper {
  private static String getTemplatedName(SNode ns) {
    String templateAppendix = "";
    if (SNodeOperations.isInstanceOf(ns, "com.mbeddr.cpp.classes.structure.ICanDeclareTemplate")) {
      for (SNode tpar : SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.as(ns, "com.mbeddr.cpp.classes.structure.ICanDeclareTemplate"), "template", true), "parameters", true)) {
        DebugNamespaceBehavior.debug("Parameter is: " + tpar);
        templateAppendix += tpar + ", ";
      }
      if (templateAppendix.length() > 2) {
        templateAppendix = "<" + templateAppendix.substring(0, templateAppendix.length() - 2) + ">";
      }
    }

    return SPropertyOperations.getString(ns, "name") + templateAppendix;
  }

  public static String getNsFullName(SNode ns) {
    DebugNamespaceBehavior.debug("   ****   getNsFullName called for NSProvider " + ns + "    ****    ");

    ArrayList<String> allNames = new ArrayList<String>();


    allNames.add(getTemplatedName(ns));


    SNode ancestor = SNodeOperations.getAncestor(ns, "com.mbeddr.cpp.cext.structure.INamespaceProvider", false, false);

    while (ancestor != null) {
      DebugNamespaceBehavior.debug("Working with ancestor: " + ancestor + " with namespace " + IIdentifierNamedConcept_Behavior.call_namespace_7502794012053364658(ancestor));
      allNames.add(getTemplatedName(ancestor));
      ancestor = SNodeOperations.getAncestor(ancestor, "com.mbeddr.cpp.cext.structure.INamespaceProvider", false, false);
    }

    String res = "";

    for (int i = allNames.size() - 1; i >= 0; --i) {
      if (res.length() > 0) {
        res += "::";
      }
      res += allNames.get(i);
    }

    DebugNamespaceBehavior.debug("Returning full ns name: " + res);

    return res;

  }
}
