package com.mbeddr.cpp.cext.constraints;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.internal.collections.runtime.backports.Deque;
import jetbrains.mps.internal.collections.runtime.LinkedListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import com.mbeddr.core.base.constraints.CIdentifierHelper;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class CppNamingHelper {
  private static Set<String> CppReservedKeywords;
  private static Set<String> CppOnlyKeywords;

  private static Iterable<String> getCppReservedKeywords() {

    Deque<String> res = LinkedListSequence.fromLinkedList(new LinkedList<String>());

    LinkedListSequence.fromLinkedList(res).addElement("alignas");
    LinkedListSequence.fromLinkedList(res).addElement("alignof");
    LinkedListSequence.fromLinkedList(res).addElement("and");
    LinkedListSequence.fromLinkedList(res).addElement("and_eq");
    LinkedListSequence.fromLinkedList(res).addElement("asm");
    LinkedListSequence.fromLinkedList(res).addElement("auto");

    LinkedListSequence.fromLinkedList(res).addElement("bitand");
    LinkedListSequence.fromLinkedList(res).addElement("bitor");
    LinkedListSequence.fromLinkedList(res).addElement("bool");
    LinkedListSequence.fromLinkedList(res).addElement("break");

    LinkedListSequence.fromLinkedList(res).addElement("case");
    LinkedListSequence.fromLinkedList(res).addElement("catch");
    LinkedListSequence.fromLinkedList(res).addElement("char");
    LinkedListSequence.fromLinkedList(res).addElement("char16_t");
    LinkedListSequence.fromLinkedList(res).addElement("char32_t");
    LinkedListSequence.fromLinkedList(res).addElement("class");
    LinkedListSequence.fromLinkedList(res).addElement("compl");
    LinkedListSequence.fromLinkedList(res).addElement("const");
    LinkedListSequence.fromLinkedList(res).addElement("constexpr");
    LinkedListSequence.fromLinkedList(res).addElement("const_cast");
    LinkedListSequence.fromLinkedList(res).addElement("continue");

    LinkedListSequence.fromLinkedList(res).addElement("decltype");
    LinkedListSequence.fromLinkedList(res).addElement("default");
    LinkedListSequence.fromLinkedList(res).addElement("delete");
    LinkedListSequence.fromLinkedList(res).addElement("do");
    LinkedListSequence.fromLinkedList(res).addElement("double");
    LinkedListSequence.fromLinkedList(res).addElement("dynamic_cast");

    LinkedListSequence.fromLinkedList(res).addElement("else");
    LinkedListSequence.fromLinkedList(res).addElement("enum");
    LinkedListSequence.fromLinkedList(res).addElement("explicit");
    LinkedListSequence.fromLinkedList(res).addElement("export");
    LinkedListSequence.fromLinkedList(res).addElement("extern");

    LinkedListSequence.fromLinkedList(res).addElement("false");
    LinkedListSequence.fromLinkedList(res).addElement("float");
    LinkedListSequence.fromLinkedList(res).addElement("for");
    LinkedListSequence.fromLinkedList(res).addElement("friend");

    LinkedListSequence.fromLinkedList(res).addElement("goto");

    LinkedListSequence.fromLinkedList(res).addElement("if");
    LinkedListSequence.fromLinkedList(res).addElement("inline");
    LinkedListSequence.fromLinkedList(res).addElement("int");

    LinkedListSequence.fromLinkedList(res).addElement("long");

    LinkedListSequence.fromLinkedList(res).addElement("mutable");

    LinkedListSequence.fromLinkedList(res).addElement("namespace");

    LinkedListSequence.fromLinkedList(res).addElement("new");
    LinkedListSequence.fromLinkedList(res).addElement("noexcept");
    LinkedListSequence.fromLinkedList(res).addElement("not");
    LinkedListSequence.fromLinkedList(res).addElement("not_eq");
    LinkedListSequence.fromLinkedList(res).addElement("nullptr");

    LinkedListSequence.fromLinkedList(res).addElement("operator");
    LinkedListSequence.fromLinkedList(res).addElement("or");
    LinkedListSequence.fromLinkedList(res).addElement("or_eq");

    LinkedListSequence.fromLinkedList(res).addElement("private");
    LinkedListSequence.fromLinkedList(res).addElement("protected");
    LinkedListSequence.fromLinkedList(res).addElement("public");

    LinkedListSequence.fromLinkedList(res).addElement("register");
    LinkedListSequence.fromLinkedList(res).addElement("reinterpret_cast");
    LinkedListSequence.fromLinkedList(res).addElement("return");

    LinkedListSequence.fromLinkedList(res).addElement("short");
    LinkedListSequence.fromLinkedList(res).addElement("signed");
    LinkedListSequence.fromLinkedList(res).addElement("sizeof");
    LinkedListSequence.fromLinkedList(res).addElement("static");
    LinkedListSequence.fromLinkedList(res).addElement("static_assert");
    LinkedListSequence.fromLinkedList(res).addElement("static_cast");
    LinkedListSequence.fromLinkedList(res).addElement("struct");
    LinkedListSequence.fromLinkedList(res).addElement("switch");

    LinkedListSequence.fromLinkedList(res).addElement("template");
    LinkedListSequence.fromLinkedList(res).addElement("this");
    LinkedListSequence.fromLinkedList(res).addElement("thread_local");
    LinkedListSequence.fromLinkedList(res).addElement("throw");
    LinkedListSequence.fromLinkedList(res).addElement("true");
    LinkedListSequence.fromLinkedList(res).addElement("try");
    LinkedListSequence.fromLinkedList(res).addElement("typedef");
    LinkedListSequence.fromLinkedList(res).addElement("typeid");
    LinkedListSequence.fromLinkedList(res).addElement("typename");

    LinkedListSequence.fromLinkedList(res).addElement("union");
    LinkedListSequence.fromLinkedList(res).addElement("unsigned");
    LinkedListSequence.fromLinkedList(res).addElement("using");

    LinkedListSequence.fromLinkedList(res).addElement("virtual");
    LinkedListSequence.fromLinkedList(res).addElement("void");
    LinkedListSequence.fromLinkedList(res).addElement("volatile");

    LinkedListSequence.fromLinkedList(res).addElement("wchar_t");
    LinkedListSequence.fromLinkedList(res).addElement("while");

    LinkedListSequence.fromLinkedList(res).addElement("xor");
    LinkedListSequence.fromLinkedList(res).addElement("xor_eq");

    return res;
  }

  public static boolean isNameValid(String name) {
    if (name.matches("[a-zA-Z$[_]][a-zA-Z0-9$[_][-]]*")) {
      if (CIdentifierHelper.isCKeyword(name)) {
        return false;
      }
      if (SetSequence.fromSet(CppOnlyKeywords).contains(name)) {
        return false;
      }
      return true;
    } else {
      return false;
    }

  }

  public static boolean isCppKeyWord(String name) {
    return SetSequence.fromSet(CppReservedKeywords).contains(name);
  }

  static {
    CppReservedKeywords = SetSequence.fromSet(new HashSet<String>());
    SetSequence.fromSet(CppReservedKeywords).addSequence(Sequence.fromIterable(getCppReservedKeywords()));

    CppOnlyKeywords = SetSequence.fromSet(new HashSet<String>());

    for (String string : CppReservedKeywords) {
      if (CIdentifierHelper.isCKeyword(string)) {
        continue;
      }
      SetSequence.fromSet(CppOnlyKeywords).addElement(string);
    }
  }
}
