package com.mbeddr.cpp.classes.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferencePresentationContext;
import com.mbeddr.cpp.classes.behavior.AbstractMethodDeclaration_Behavior;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.mbeddr.cpp.classes.behavior.ClassLocator;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import com.mbeddr.cpp.classes.behavior.Classifier_Behavior;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.mbeddr.cpp.classes.behavior.VisibilityHelper;
import com.mbeddr.cpp.classes.behavior.ClassDeclaration_Behavior;
import java.util.ArrayList;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;

public class ConstructorCallExpression_Constraints extends BaseConstraintsDescriptor {
  public ConstructorCallExpression_Constraints() {
    super("com.mbeddr.cpp.classes.structure.ConstructorCallExpression");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("methodOrConstructor", new BaseReferenceConstraintsDescriptor("methodOrConstructor", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public boolean hasPresentation() {
            return true;
          }

          @Override
          public String getPresentation(final IOperationContext operationContext, final ReferencePresentationContext _context) {
            return AbstractMethodDeclaration_Behavior.call_signaturePresentation_2015268598019204067(_context.getParameterNode());
          }

          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            // This is good - public constructors. 
            Iterable<SNode> publicConstructors = Sequence.fromIterable(ClassLocator.getAvailableClasses(_context.getEnclosingNode())).translate(new ITranslator2<SNode, SNode>() {
              public Iterable<SNode> translate(SNode it) {
                return Sequence.fromIterable(Classifier_Behavior.call_publicMembers_8616684942293671639(it)).where(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SNodeOperations.isInstanceOf(it, "com.mbeddr.cpp.classes.structure.ConstructorDeclaration");
                  }
                });
              }
            });

            // But this is not everything 
            SNode constructorCall = _context.getContextNode();

            SNode accessingClass = VisibilityHelper.getClassInWhichAccessHappens(constructorCall);

            if (accessingClass != null) {

              Iterable<SNode> friends = ClassDeclaration_Behavior.call_classesDeclaringFriendshipWith_3152709411796917877(accessingClass, constructorCall);

              Iterable<SNode> friendsConstructors = new ArrayList<SNode>();
              for (SNode node_Class_ : friends) {
                friendsConstructors = Sequence.fromIterable(friendsConstructors).union(Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), node_Class_, "virtual_allMembersOfThisClassOnly_1022708226502685404", new Object[]{})).where(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SNodeOperations.isInstanceOf(it, "com.mbeddr.cpp.classes.structure.ConstructorDeclaration");
                  }
                }));
              }

              return Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), accessingClass, "virtual_members_1022708226502685371", new Object[]{})).where(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SNodeOperations.isInstanceOf(it, "com.mbeddr.cpp.classes.structure.ConstructorDeclaration");
                }
              }).union(Sequence.fromIterable(publicConstructors)).union(Sequence.fromIterable(friendsConstructors));
            }

            Iterable<SNode> friendsToCurrentFunction = VisibilityHelper.getFriendClassesOfTheCurrentFunction(constructorCall);

            for (SNode friendClass : Sequence.fromIterable(friendsToCurrentFunction)) {
              publicConstructors = Sequence.fromIterable(publicConstructors).union(Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), friendClass, "virtual_members_1022708226502685371", new Object[]{})).where(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SNodeOperations.isInstanceOf(it, "com.mbeddr.cpp.classes.structure.ConstructorDeclaration");
                }
              }));
            }

            return publicConstructors;
          }

          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_vb4a43_a0a3a0a0a1a0b0a1a1;
          }
        };
      }
    });
    return references;
  }

  private static SNodePointer breakingNode_vb4a43_a0a3a0a0a1a0b0a1a1 = new SNodePointer("r:5713504b-b269-4946-8fca-49fcca934ac1(com.mbeddr.cpp.classes.constraints)", "4157133445515759062");
}
