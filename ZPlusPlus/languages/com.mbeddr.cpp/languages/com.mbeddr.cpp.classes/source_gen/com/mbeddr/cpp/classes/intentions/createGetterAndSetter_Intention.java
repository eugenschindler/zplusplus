package com.mbeddr.cpp.classes.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import com.mbeddr.cpp.classes.behavior.Field_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.mbeddr.cpp.classes.behavior.ClassDeclaration_Behavior;
import com.mbeddr.cpp.classes.behavior.MethodDeclaration_Behavior;
import com.mbeddr.cpp.classes.behavior.ArgUtil;
import jetbrains.mps.intentions.IntentionDescriptor;

public class createGetterAndSetter_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public createGetterAndSetter_Intention() {
  }

  public String getConcept() {
    return "com.mbeddr.cpp.classes.structure.Field";
  }

  public String getPresentation() {
    return "createGetterAndSetter";
  }

  public String getPersistentStateKey() {
    return "com.mbeddr.cpp.classes.intentions.createGetterAndSetter_Intention";
  }

  public String getLanguageFqName() {
    return "com.mbeddr.cpp.classes";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return Field_Behavior.call_getNamingConventions_158014820112622158(node) != null && SNodeOperations.getAncestor(node, "com.mbeddr.cpp.classes.structure.ClassDeclaration", false, false) != null;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:82dd6aa6-7b0e-4d3f-ac7e-a3ce4807a3b1(com.mbeddr.cpp.classes.intentions)", "158014820112622114");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new createGetterAndSetter_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Create Getter and Setter";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode theClass = SNodeOperations.getAncestor(node, "com.mbeddr.cpp.classes.structure.ClassDeclaration", false, false);


      // Declaring and generating getField(){ return this->field; } 

      {
        SNode getterDeclaration = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.MethodDeclaration", null);

        SLinkOperations.setTarget(getterDeclaration, "type", SNodeOperations.copyNode(SLinkOperations.getTarget(node, "type", true)), true);

        SPropertyOperations.set(getterDeclaration, "name", SPropertyOperations.getString(Field_Behavior.call_getNamingConventions_158014820112622158(node), "GetPrefix") + Field_Behavior.call_getCapName_158014820112622153(node));


        ListSequence.fromList(SLinkOperations.getTargets(ClassDeclaration_Behavior.call_getPublicSection_158014820112639961(theClass), "members", true)).addElement(getterDeclaration);

        SNode getterImplementation = MethodDeclaration_Behavior.call_generateImplementation_158014820112639916(getterDeclaration);

        SNode returnStatement = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ReturnStatement", null);

        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(getterImplementation, "body", true), "statements", true)).addElement(returnStatement);

        SNode arrowExpression = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.OoArrowExpression", null);

        SLinkOperations.setTarget(arrowExpression, "object", SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.ThisExpression", null), true);

        SNode fieldAccess = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.OoFieldAccess", null);
        SLinkOperations.setTarget(fieldAccess, "field", node, false);

        SLinkOperations.setTarget(arrowExpression, "member", fieldAccess, true);

        SLinkOperations.setTarget(returnStatement, "expression", arrowExpression, true);

      }


      // Declaring and generating boolean setField(const type& theField) { this->field = theField; return true;} 

      {
        SNode setterDeclaration = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.MethodDeclaration", null);

        SLinkOperations.setTarget(setterDeclaration, "type", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.BooleanType", null), true);
        SPropertyOperations.set(setterDeclaration, "name", SPropertyOperations.getString(Field_Behavior.call_getNamingConventions_158014820112622158(node), "SetPrefix") + Field_Behavior.call_getCapName_158014820112622153(node));

        SNode theFieldType = SLinkOperations.getTarget(node, "type", true);

        SNode theArgType = SNodeOperations.copyNode(theFieldType);
        SPropertyOperations.set(theArgType, "const", "" + (true));

        if (SNodeOperations.isInstanceOf(theFieldType, "com.mbeddr.cpp.classes.structure.ClassifierType") || SNodeOperations.isInstanceOf(theFieldType, "com.mbeddr.core.udt.structure.SUType")) {
          theArgType = ArgUtil.makeConstRefType(SNodeOperations.copyNode(theFieldType));
        }

        SNode arg = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.MethodArgument", null);
        SLinkOperations.setTarget(arg, "type", theArgType, true);
        SPropertyOperations.set(arg, "name", SPropertyOperations.getString(Field_Behavior.call_getNamingConventions_158014820112622158(node), "SetterArgPrefix") + Field_Behavior.call_getCapName_158014820112622153(node));

        ListSequence.fromList(SLinkOperations.getTargets(setterDeclaration, "args", true)).addElement(arg);

        ListSequence.fromList(SLinkOperations.getTargets(ClassDeclaration_Behavior.call_getPublicSection_158014820112639961(theClass), "members", true)).addElement(setterDeclaration);

        SNode setterImplementation = MethodDeclaration_Behavior.call_generateImplementation_158014820112639916(setterDeclaration);



        SNode expressionStatement = SConceptOperations.createNewNode("com.mbeddr.core.statements.structure.ExpressionStatement", null);
        SNode assignmentExpr = SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.AssignmentExpr", null);

        SLinkOperations.setTarget(expressionStatement, "expr", assignmentExpr, true);

        SNode arrowExpression = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.OoArrowExpression", null);

        SLinkOperations.setTarget(arrowExpression, "object", SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.ThisExpression", null), true);

        SNode fieldAccess = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.OoFieldAccess", null);
        SLinkOperations.setTarget(fieldAccess, "field", node, false);

        SLinkOperations.setTarget(arrowExpression, "member", fieldAccess, true);

        SLinkOperations.setTarget(assignmentExpr, "left", arrowExpression, true);

        SNode argumentRef = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ArgumentRef", null);
        // <node> 

        SLinkOperations.setTarget(argumentRef, "arg", ListSequence.fromList(SLinkOperations.getTargets(setterImplementation, "arguments", true)).first(), false);

        SLinkOperations.setTarget(assignmentExpr, "right", argumentRef, true);

        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(setterImplementation, "body", true), "statements", true)).addElement(expressionStatement);

        // return true; 

        SNode returnStatement = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.ReturnStatement", null);
        SLinkOperations.setTarget(returnStatement, "expression", SConceptOperations.createNewNode("com.mbeddr.core.expressions.structure.TrueLiteral", null), true);

        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(setterImplementation, "body", true), "statements", true)).addElement(returnStatement);


      }



    }

    public IntentionDescriptor getDescriptor() {
      return createGetterAndSetter_Intention.this;
    }
  }
}
