package com.mbeddr.cpp.classes.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.AbstractImplementableAsMethod").super_("com.mbeddr.cpp.classes.structure.AbstractMethodDeclaration").parents("com.mbeddr.cpp.classes.structure.AbstractMethodDeclaration", "com.mbeddr.core.expressions.structure.ITyped").abstract_().create();
      case 1:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.AbstractMethodDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.cpp.classes.structure.IClassMember").properties("virtual").children(new String[]{"args"}, new boolean[]{true}).abstract_().create();
      case 2:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.AbstractMethodImplementation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.core.modules.structure.IModuleContent", "com.mbeddr.core.modules.structure.IFunctionLike", "com.mbeddr.cpp.classes.structure.IThisContainer", "com.mbeddr.cpp.classes.structure.ICanBeInTemplateContext", "com.mbeddr.cpp.cext.structure.IRequiresCPPModule").abstract_().create();
      case 3:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.AsExpression").super_("com.mbeddr.core.expressions.structure.Expression").parents("com.mbeddr.core.expressions.structure.Expression").children(new String[]{"expr", "destPointerType"}, new boolean[]{false, false}).alias("as", "dynamic cast").create();
      case 4:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.AssignmentOperatorDesignator").super_("com.mbeddr.cpp.classes.structure.OperatorDesignatorAbstract").parents("com.mbeddr.cpp.classes.structure.OperatorDesignatorAbstract").alias("=", "").create();
      case 5:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ClassDeclaration").super_("com.mbeddr.cpp.classes.structure.Classifier").parents("com.mbeddr.cpp.classes.structure.Classifier", "com.mbeddr.cpp.cext.structure.IRequiresCPPModule", "com.mbeddr.cpp.cext.structure.IReferencableByNamespaceResolutionOperator", "com.mbeddr.cpp.classes.structure.IClassMember").children(new String[]{"realization", "protectedMemberList", "privateMemberList", "inheritanceDefinitions", "friendDeclarations"}, new boolean[]{false, false, false, true, true}).alias("class", "a C++ class").create();
      case 6:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ClassMember").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.core.base.structure.IIdentifierNamedConcept", "com.mbeddr.core.base.structure.IDocumentable").abstract_().create();
      case 7:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ClassRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("cls").create();
      case 8:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ClassRefExpr").super_("com.mbeddr.cpp.classes.structure.TypeRefExpr").parents("com.mbeddr.cpp.classes.structure.TypeRefExpr").references("cls").create();
      case 9:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.Classifier").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.cpp.classes.structure.ICanBeInTemplateContext", "com.mbeddr.cpp.classes.structure.ICanDeclareTemplate", "com.mbeddr.core.modules.structure.IModuleContent", "com.mbeddr.cpp.cext.structure.INamespaceProvider").children(new String[]{"publicMemberList"}, new boolean[]{false}).abstract_().create();
      case 10:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ClassifierType").super_("com.mbeddr.core.expressions.structure.Type").parents("com.mbeddr.core.expressions.structure.Type", "com.mbeddr.cpp.classes.structure.ITemplateInstantiator", "com.mbeddr.core.expressions.structure.ISelfTypingInBinaryExpression", "com.mbeddr.core.pointers.structure.ISelfTypingInArrayAccessExpression").references("cls").create();
      case 11:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.Concept").super_("com.mbeddr.cpp.classes.structure.Classifier").parents("com.mbeddr.cpp.classes.structure.Classifier").properties("ordered").alias("concept", "a C++ concept").create();
      case 12:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ConceptRealizationClause").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"concepts"}, new boolean[]{true}).create();
      case 13:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ConceptRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("concept").create();
      case 14:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ConceptRestrictedTemplateParameter").super_("com.mbeddr.cpp.classes.structure.TemplateParameter").parents("com.mbeddr.cpp.classes.structure.TemplateParameter").references("concept").alias("concept parameter", "").create();
      case 15:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ConceptRestrictedTemplateParameterType").super_("com.mbeddr.core.expressions.structure.Type").parents("com.mbeddr.core.expressions.structure.Type").references("parameter").create();
      case 16:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ConceptRestrictedTypeRefExpr").super_("com.mbeddr.cpp.classes.structure.TypeRefExpr").parents("com.mbeddr.cpp.classes.structure.TypeRefExpr").children(new String[]{"Type"}, new boolean[]{false}).alias("concept restricted type", "").create();
      case 17:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ConceptType").super_("com.mbeddr.core.expressions.structure.Type").parents("com.mbeddr.core.expressions.structure.Type").references("concept").create();
      case 18:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ConstructorCallExpression").super_("com.mbeddr.core.expressions.structure.Expression").parents("com.mbeddr.core.expressions.structure.Expression", "com.mbeddr.cpp.classes.structure.INewCreator", "com.mbeddr.cpp.classes.structure.IMethodOrConsCall", "com.mbeddr.cpp.classes.structure.ITemplateInstantiator").references("constructor").create();
      case 19:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ConstructorDeclaration").super_("com.mbeddr.cpp.classes.structure.AbstractMethodDeclaration").parents("com.mbeddr.cpp.classes.structure.AbstractMethodDeclaration").properties("explicit").alias("constructor", "").create();
      case 20:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ConstructorImplementation").super_("com.mbeddr.cpp.classes.structure.AbstractMethodImplementation").parents("com.mbeddr.cpp.classes.structure.AbstractMethodImplementation", "com.mbeddr.core.modules.structure.IModuleContent", "com.mbeddr.core.modules.structure.IFunctionLike", "com.mbeddr.cpp.classes.structure.IThisContainer", "com.mbeddr.core.base.structure.ILOCCountProvider", "com.mbeddr.cpp.classes.structure.ICanBeInTemplateContext").references("constructor").children(new String[]{"initializers", "body"}, new boolean[]{true, false}).create();
      case 21:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ConstructorInitializer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.cpp.classes.structure.IInitializerInConstructor").children(new String[]{"constructorCallExpr"}, new boolean[]{false}).create();
      case 22:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.Cout").super_("com.mbeddr.core.expressions.structure.Expression").parents("com.mbeddr.core.expressions.structure.Expression").children(new String[]{"expr"}, new boolean[]{false}).alias("cout", "").create();
      case 23:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.CppNamingConventions").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("MemberPrefix", "GetPrefix", "SetPrefix", "SetterArgPrefix").create();
      case 24:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.DeleteArrayStatement").super_("com.mbeddr.core.statements.structure.Statement").parents("com.mbeddr.core.statements.structure.Statement").children(new String[]{"expression"}, new boolean[]{false}).alias("delete array", "").create();
      case 25:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.DeleteStatement").super_("com.mbeddr.core.statements.structure.Statement").parents("com.mbeddr.core.statements.structure.Statement").children(new String[]{"expression"}, new boolean[]{false}).alias("delete", "delete a heap object").create();
      case 26:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.DestructorDeclaration").super_("com.mbeddr.cpp.classes.structure.AbstractMethodDeclaration").parents("com.mbeddr.cpp.classes.structure.AbstractMethodDeclaration").alias("destructor", "").create();
      case 27:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.DestructorImplementation").super_("com.mbeddr.cpp.classes.structure.AbstractMethodImplementation").parents("com.mbeddr.cpp.classes.structure.AbstractMethodImplementation", "com.mbeddr.core.modules.structure.IModuleContent", "com.mbeddr.core.modules.structure.IFunctionLike", "com.mbeddr.cpp.classes.structure.IThisContainer", "com.mbeddr.core.base.structure.ILOCCountProvider", "com.mbeddr.cpp.classes.structure.ICanBeInTemplateContext").references("destructor").children(new String[]{"body"}, new boolean[]{false}).create();
      case 28:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.Field").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.core.expressions.structure.ITyped", "com.mbeddr.cpp.classes.structure.IClassMember").alias("field", "").create();
      case 29:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.FieldAccessExpression").super_("com.mbeddr.core.expressions.structure.Expression").parents("com.mbeddr.core.expressions.structure.Expression").references("field").create();
      case 30:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.FieldInitializer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.cpp.classes.structure.IInitializerInConstructor").references("field").children(new String[]{"value"}, new boolean[]{false}).create();
      case 31:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.FriendClassDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.cpp.classes.structure.FriendDeclaration").references("friendClass").alias("friend class", "").create();
      case 32:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.FriendDeclaration").interface_().create();
      case 33:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.FriendFunctionDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.cpp.classes.structure.FriendDeclaration").references("friendFunction").alias("friend function", "").create();
      case 34:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ICanBeInTemplateContext").interface_().create();
      case 35:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ICanDeclareTemplate").interface_().children(new String[]{"template"}, new boolean[]{false}).create();
      case 36:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.IClassMember").interface_().parents("com.mbeddr.cpp.cext.structure.ICppIdentifierNamedConcept", "com.mbeddr.core.base.structure.IDocumentable").create();
      case 37:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.IInitializerInConstructor").interface_().create();
      case 38:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.IMethodOrConsCall").interface_().references("methodOrConstructor").children(new String[]{"actuals"}, new boolean[]{true}).create();
      case 39:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.INewCreator").interface_().create();
      case 40:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ITemplateInstantiator").interface_().children(new String[]{"templateActuals"}, new boolean[]{true}).create();
      case 41:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.IThisContainer").interface_().create();
      case 42:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.IndexExpression").super_("com.mbeddr.core.expressions.structure.Expression").parents("com.mbeddr.core.expressions.structure.Expression").create();
      case 43:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.InheritanceDefinition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("isVirtual", "inheritanceType").references("baseClass").create();
      case 44:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.MemberList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"members"}, new boolean[]{true}).abstract_().create();
      case 45:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.MethodArgument").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.core.modules.structure.IArgumentLike").children(new String[]{"defaultValue"}, new boolean[]{false}).create();
      case 46:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.MethodDeclaration").super_("com.mbeddr.cpp.classes.structure.AbstractImplementableAsMethod").parents("com.mbeddr.cpp.classes.structure.AbstractImplementableAsMethod").properties("overrides", "pureVirtual").references("overriddenMethod").alias("method", "").create();
      case 47:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.MethodImplementation").super_("com.mbeddr.cpp.classes.structure.AbstractMethodImplementation").parents("com.mbeddr.cpp.classes.structure.AbstractMethodImplementation").references("method").children(new String[]{"body"}, new boolean[]{false}).create();
      case 48:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.MinusOperatorDesignator").super_("com.mbeddr.cpp.classes.structure.OperatorDesignatorAbstract").parents("com.mbeddr.cpp.classes.structure.OperatorDesignatorAbstract").alias("-", "").create();
      case 49:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.NewArrayExpression").super_("com.mbeddr.core.expressions.structure.Expression").parents("com.mbeddr.core.expressions.structure.Expression").children(new String[]{"allocatedType", "sizeExpression"}, new boolean[]{false, false}).alias("new array", "").create();
      case 50:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.NewExpression").super_("com.mbeddr.core.expressions.structure.Expression").parents("com.mbeddr.core.expressions.structure.Expression").children(new String[]{"creator"}, new boolean[]{false}).alias("new", "").create();
      case 51:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.OoArrowExpression").super_("com.mbeddr.cpp.classes.structure.OoDotOrArrowExpr").parents("com.mbeddr.cpp.classes.structure.OoDotOrArrowExpr").create();
      case 52:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.OoDotExpression").super_("com.mbeddr.cpp.classes.structure.OoDotOrArrowExpr").parents("com.mbeddr.cpp.classes.structure.OoDotOrArrowExpr").create();
      case 53:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.OoDotOrArrowExpr").super_("com.mbeddr.core.expressions.structure.Expression").parents("com.mbeddr.core.expressions.structure.Expression").children(new String[]{"object", "member"}, new boolean[]{false, false}).abstract_().create();
      case 54:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.OoFieldAccess").super_("com.mbeddr.cpp.classes.structure.OoMemberRef").parents("com.mbeddr.cpp.classes.structure.OoMemberRef").references("field").create();
      case 55:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.OoMemberRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
      case 56:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.OoMethodCall").super_("com.mbeddr.cpp.classes.structure.OoMemberRef").parents("com.mbeddr.cpp.classes.structure.OoMemberRef", "com.mbeddr.cpp.classes.structure.IMethodOrConsCall").references("method").create();
      case 57:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.OperatorDesignatorAbstract").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
      case 58:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.OperatorOverloadingDeclaration").super_("com.mbeddr.cpp.classes.structure.AbstractImplementableAsMethod").parents("com.mbeddr.cpp.classes.structure.AbstractImplementableAsMethod").children(new String[]{"operatorDesignator"}, new boolean[]{false}).alias("operator", "").create();
      case 59:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.PlusOperatorDesignator").super_("com.mbeddr.cpp.classes.structure.OperatorDesignatorAbstract").parents("com.mbeddr.cpp.classes.structure.OperatorDesignatorAbstract").alias("+", "").create();
      case 60:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.PrimitiveTemplateParamRef").super_("com.mbeddr.core.expressions.structure.Expression").parents("com.mbeddr.core.expressions.structure.Expression").references("parameter").create();
      case 61:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.PrimitiveTypeRefExpr").super_("com.mbeddr.cpp.classes.structure.TypeRefExpr").parents("com.mbeddr.cpp.classes.structure.TypeRefExpr").children(new String[]{"primitiveType"}, new boolean[]{false}).alias("#", "a primitive type").create();
      case 62:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.PrivateMemberList").super_("com.mbeddr.cpp.classes.structure.MemberList").parents("com.mbeddr.cpp.classes.structure.MemberList").alias("private", "").create();
      case 63:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ProtectedMemberList").super_("com.mbeddr.cpp.classes.structure.MemberList").parents("com.mbeddr.cpp.classes.structure.MemberList").alias("protected", "").create();
      case 64:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.PublicMemberList").super_("com.mbeddr.cpp.classes.structure.MemberList").parents("com.mbeddr.cpp.classes.structure.MemberList").alias("public", "").create();
      case 65:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.SafeDeleteStatement").super_("com.mbeddr.cpp.classes.structure.DeleteStatement").parents("com.mbeddr.cpp.classes.structure.DeleteStatement").alias("deleteSafe", "").create();
      case 66:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.SquareBracketsOperatorDesignator").super_("com.mbeddr.cpp.classes.structure.OperatorDesignatorAbstract").parents("com.mbeddr.cpp.classes.structure.OperatorDesignatorAbstract").alias("[]", "").create();
      case 67:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.Template").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"parameters"}, new boolean[]{true}).create();
      case 68:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.TemplateClassParameter").super_("com.mbeddr.cpp.classes.structure.TemplateParameter").parents("com.mbeddr.cpp.classes.structure.TemplateParameter").children(new String[]{"concept"}, new boolean[]{false}).alias("class", "").create();
      case 69:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.TemplateParamType").super_("com.mbeddr.core.expressions.structure.Type").parents("com.mbeddr.core.expressions.structure.Type").references("param").create();
      case 70:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.TemplateParameter").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "com.mbeddr.cpp.cext.structure.ICppIdentifierNamedConcept").abstract_().create();
      case 71:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.TemplatePrimitiveParameter").super_("com.mbeddr.cpp.classes.structure.TemplateParameter").parents("com.mbeddr.cpp.classes.structure.TemplateParameter").children(new String[]{"type"}, new boolean[]{false}).create();
      case 72:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.ThisExpression").super_("com.mbeddr.core.expressions.structure.Expression").parents("com.mbeddr.core.expressions.structure.Expression").alias("this", "").create();
      case 73:
        return new ConceptDescriptorBuilder("com.mbeddr.cpp.classes.structure.TypeRefExpr").super_("com.mbeddr.core.expressions.structure.Expression").parents("com.mbeddr.core.expressions.structure.Expression").abstract_().create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }

  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"com.mbeddr.cpp.classes.structure.AbstractImplementableAsMethod", "com.mbeddr.cpp.classes.structure.AbstractMethodDeclaration", "com.mbeddr.cpp.classes.structure.AbstractMethodImplementation", "com.mbeddr.cpp.classes.structure.AsExpression", "com.mbeddr.cpp.classes.structure.AssignmentOperatorDesignator", "com.mbeddr.cpp.classes.structure.ClassDeclaration", "com.mbeddr.cpp.classes.structure.ClassMember", "com.mbeddr.cpp.classes.structure.ClassRef", "com.mbeddr.cpp.classes.structure.ClassRefExpr", "com.mbeddr.cpp.classes.structure.Classifier", "com.mbeddr.cpp.classes.structure.ClassifierType", "com.mbeddr.cpp.classes.structure.Concept", "com.mbeddr.cpp.classes.structure.ConceptRealizationClause", "com.mbeddr.cpp.classes.structure.ConceptRef", "com.mbeddr.cpp.classes.structure.ConceptRestrictedTemplateParameter", "com.mbeddr.cpp.classes.structure.ConceptRestrictedTemplateParameterType", "com.mbeddr.cpp.classes.structure.ConceptRestrictedTypeRefExpr", "com.mbeddr.cpp.classes.structure.ConceptType", "com.mbeddr.cpp.classes.structure.ConstructorCallExpression", "com.mbeddr.cpp.classes.structure.ConstructorDeclaration", "com.mbeddr.cpp.classes.structure.ConstructorImplementation", "com.mbeddr.cpp.classes.structure.ConstructorInitializer", "com.mbeddr.cpp.classes.structure.Cout", "com.mbeddr.cpp.classes.structure.CppNamingConventions", "com.mbeddr.cpp.classes.structure.DeleteArrayStatement", "com.mbeddr.cpp.classes.structure.DeleteStatement", "com.mbeddr.cpp.classes.structure.DestructorDeclaration", "com.mbeddr.cpp.classes.structure.DestructorImplementation", "com.mbeddr.cpp.classes.structure.Field", "com.mbeddr.cpp.classes.structure.FieldAccessExpression", "com.mbeddr.cpp.classes.structure.FieldInitializer", "com.mbeddr.cpp.classes.structure.FriendClassDeclaration", "com.mbeddr.cpp.classes.structure.FriendDeclaration", "com.mbeddr.cpp.classes.structure.FriendFunctionDeclaration", "com.mbeddr.cpp.classes.structure.ICanBeInTemplateContext", "com.mbeddr.cpp.classes.structure.ICanDeclareTemplate", "com.mbeddr.cpp.classes.structure.IClassMember", "com.mbeddr.cpp.classes.structure.IInitializerInConstructor", "com.mbeddr.cpp.classes.structure.IMethodOrConsCall", "com.mbeddr.cpp.classes.structure.INewCreator", "com.mbeddr.cpp.classes.structure.ITemplateInstantiator", "com.mbeddr.cpp.classes.structure.IThisContainer", "com.mbeddr.cpp.classes.structure.IndexExpression", "com.mbeddr.cpp.classes.structure.InheritanceDefinition", "com.mbeddr.cpp.classes.structure.MemberList", "com.mbeddr.cpp.classes.structure.MethodArgument", "com.mbeddr.cpp.classes.structure.MethodDeclaration", "com.mbeddr.cpp.classes.structure.MethodImplementation", "com.mbeddr.cpp.classes.structure.MinusOperatorDesignator", "com.mbeddr.cpp.classes.structure.NewArrayExpression", "com.mbeddr.cpp.classes.structure.NewExpression", "com.mbeddr.cpp.classes.structure.OoArrowExpression", "com.mbeddr.cpp.classes.structure.OoDotExpression", "com.mbeddr.cpp.classes.structure.OoDotOrArrowExpr", "com.mbeddr.cpp.classes.structure.OoFieldAccess", "com.mbeddr.cpp.classes.structure.OoMemberRef", "com.mbeddr.cpp.classes.structure.OoMethodCall", "com.mbeddr.cpp.classes.structure.OperatorDesignatorAbstract", "com.mbeddr.cpp.classes.structure.OperatorOverloadingDeclaration", "com.mbeddr.cpp.classes.structure.PlusOperatorDesignator", "com.mbeddr.cpp.classes.structure.PrimitiveTemplateParamRef", "com.mbeddr.cpp.classes.structure.PrimitiveTypeRefExpr", "com.mbeddr.cpp.classes.structure.PrivateMemberList", "com.mbeddr.cpp.classes.structure.ProtectedMemberList", "com.mbeddr.cpp.classes.structure.PublicMemberList", "com.mbeddr.cpp.classes.structure.SafeDeleteStatement", "com.mbeddr.cpp.classes.structure.SquareBracketsOperatorDesignator", "com.mbeddr.cpp.classes.structure.Template", "com.mbeddr.cpp.classes.structure.TemplateClassParameter", "com.mbeddr.cpp.classes.structure.TemplateParamType", "com.mbeddr.cpp.classes.structure.TemplateParameter", "com.mbeddr.cpp.classes.structure.TemplatePrimitiveParameter", "com.mbeddr.cpp.classes.structure.ThisExpression", "com.mbeddr.cpp.classes.structure.TypeRefExpr"};
}
