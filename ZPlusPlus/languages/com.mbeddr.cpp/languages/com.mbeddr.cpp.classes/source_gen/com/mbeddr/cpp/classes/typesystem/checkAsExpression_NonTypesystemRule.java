package com.mbeddr.cpp.classes.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import com.mbeddr.cpp.cext.typesystem.CppWarningUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import com.mbeddr.cpp.classes.behavior.Classifier_Behavior;
import jetbrains.mps.smodel.SModelUtil_new;

public class checkAsExpression_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public checkAsExpression_NonTypesystemRule() {
  }

  public void applyRule(final SNode asExpression, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {

    SNode classToCastTo;

    if (SLinkOperations.getTarget(asExpression, "destPointerType", true) == null) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(asExpression, "Set the type, please", "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "487313117837468787", null, errorTarget);
      }
      return;
    } else if (SLinkOperations.getTarget(SLinkOperations.getTarget(asExpression, "destPointerType", true), "baseType", true) instanceof SNode) {
      classToCastTo = SNodeOperations.as(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(SLinkOperations.getTarget(asExpression, "destPointerType", true), "baseType", true), "com.mbeddr.cpp.classes.structure.ClassifierType"), "cls", false), "com.mbeddr.cpp.classes.structure.ClassDeclaration");
    } else {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(asExpression, "destPointerType", true), "Type must be a pointer to class", "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "487313117837468910", null, errorTarget);
      }
      return;
    }

    if (classToCastTo == null) {
      return;
    }

    AsExpressionChecksDebug.debug("Found dest class: " + classToCastTo);


    AsExpressionChecksDebug.debug("Type of as expr expr: " + TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(asExpression, "expr", true)));

    if (!(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(asExpression, "expr", true)) instanceof SNode)) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(asExpression, "expr", true), "Must be a pointer", "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "487313117837339672", null, errorTarget);
      }
    } else if (!(SLinkOperations.getTarget(SNodeOperations.as(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(asExpression, "expr", true)), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true) instanceof SNode)) {
      if (CppWarningUtil.cppSpecificWarningsEnabled) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(SLinkOperations.getTarget(asExpression, "expr", true), "Is not a pointer to class, can be unsafe", "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "487313117837468600", null, errorTarget);
        }
      }
    } else {
      SNode exprType = SNodeOperations.as(SLinkOperations.getTarget(SNodeOperations.as(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(asExpression, "expr", true)), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.cpp.classes.structure.ClassifierType");
      AsExpressionChecksDebug.debug("Class type of expression: " + exprType);

      SNode sourceClass = SNodeOperations.as(SLinkOperations.getTarget(exprType, "cls", false), "com.mbeddr.cpp.classes.structure.ClassDeclaration");

      AsExpressionChecksDebug.debug("Testing now inheritance");

      if (Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), sourceClass, "virtual_allSuperclasses_1022708226502698814", new Object[]{})).contains(classToCastTo)) {
        // Casting child to parent 
        // Everything is fine! 
        return;
      } else if (Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), classToCastTo, "virtual_allSuperclasses_1022708226502698814", new Object[]{})).contains(sourceClass)) {
        // Casting parent to child 
        if (!(Classifier_Behavior.call_isPolymorphic_487313117837000168(sourceClass))) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(asExpression, "expr", true), "Casting from a not polymorphic class not possible", "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "487313117837521151", null, errorTarget);
          }
        } else {
          AsExpressionChecksDebug.debug("Casting from a polymorphic parent - allowed");
        }
      } else if (sourceClass == classToCastTo) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(asExpression, "Makes no sense to cast from a class to itself", "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "487313117837699879", null, errorTarget);
        }
      } else {
        // Casting unrelated classes - not possible 
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(asExpression, "Casting between unrelated classes", "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "487313117837699849", null, errorTarget);
        }
      }

    }



  }

  public String getApplicableConceptFQName() {
    return "com.mbeddr.cpp.classes.structure.AsExpression";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
