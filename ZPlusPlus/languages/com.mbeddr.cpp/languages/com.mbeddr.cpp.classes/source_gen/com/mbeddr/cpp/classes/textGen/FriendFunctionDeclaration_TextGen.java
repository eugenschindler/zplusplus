package com.mbeddr.cpp.classes.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.textGen.TextGenManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class FriendFunctionDeclaration_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    this.append("friend ");

    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "friendFunction", false), "type", true), this.getSNode());
    this.append(" ");
    this.append(BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(node, "friendFunction", false), "virtual_mangledName_1317894735999377422", new Object[]{}));
    this.append("(");
    if (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "friendFunction", false), "arguments", true)).count() == 0) {
      this.append("void");
    } else {
      if (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "friendFunction", false), "arguments", true)).isNotEmpty()) {
        for (SNode item : SLinkOperations.getTargets(SLinkOperations.getTarget(node, "friendFunction", false), "arguments", true)) {
          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());
          if (item != ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "friendFunction", false), "arguments", true)).last()) {
            this.append(", ");
          }
        }
      }
    }
    if (SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "friendFunction", false), "hasEllipsis")) {
      this.append(",...");
    }
    this.append(");");
    this.appendNewLine();

  }
}
