package com.mbeddr.cpp.classes.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInequationReplacementRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicable2Status;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.smodel.SModelUtil_new;

public class PointerToSubWithSuperClass_InequationReplacementRule extends AbstractInequationReplacementRule_Runtime {
  public PointerToSubWithSuperClass_InequationReplacementRule() {
  }

  public void processInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, final TypeCheckingContext typeCheckingContext, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    // <node> 

    // <node> 
    // <node> 


    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(subtype, "baseType", true), "com.mbeddr.cpp.classes.structure.ClassifierType") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(supertype, "baseType", true), "com.mbeddr.cpp.classes.structure.ClassifierType")) {
      SNode givenClass = SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(subtype, "baseType", true), "com.mbeddr.cpp.classes.structure.ClassifierType"), "cls", false);
      SNode expectedClass = SNodeOperations.as(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(supertype, "baseType", true), "com.mbeddr.cpp.classes.structure.ClassifierType"), "cls", false), "com.mbeddr.cpp.classes.structure.ClassDeclaration");

      boolean isSuper = Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), givenClass, "virtual_allSuperclasses_1022708226502698814", new Object[]{})).contains(expectedClass);
      // <node> 

      if (isSuper) {
        {
          SNode _nodeToCheck_1029348928467 = equationInfo.getNodeWithError();
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "4025012521160456412", 0, null);
          _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
          typeCheckingContext.createLessThanInequality((SNode) SLinkOperations.getTarget(subtype, "baseType", true), (SNode) SLinkOperations.getTarget(supertype, "baseType", true), false, true, _info_12389875345);
        }
      } else {
        System.out.println("Failed replacing with super type, parameters follow.");
        System.out.println("Given type: " + subtype);
        System.out.println("Expected: " + supertype);
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(equationInfo.getNodeWithError(), "No pointer to class cast found", "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "7723940708469705445", null, errorTarget);
          HUtil.addAdditionalRuleIdsFromInfo(_reporter_2309309498, equationInfo);
        }
      }

    }

  }

  public boolean checkInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    boolean result_14532009 = true;
    // <node> 

    // <node> 
    // <node> 


    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(subtype, "baseType", true), "com.mbeddr.cpp.classes.structure.ClassifierType") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(supertype, "baseType", true), "com.mbeddr.cpp.classes.structure.ClassifierType")) {
      SNode givenClass = SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(subtype, "baseType", true), "com.mbeddr.cpp.classes.structure.ClassifierType"), "cls", false);
      SNode expectedClass = SNodeOperations.as(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(supertype, "baseType", true), "com.mbeddr.cpp.classes.structure.ClassifierType"), "cls", false), "com.mbeddr.cpp.classes.structure.ClassDeclaration");

      boolean isSuper = Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), givenClass, "virtual_allSuperclasses_1022708226502698814", new Object[]{})).contains(expectedClass);
      // <node> 

      if (isSuper) {
        result_14532009 = result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode) SLinkOperations.getTarget(subtype, "baseType", true), (SNode) SLinkOperations.getTarget(supertype, "baseType", true), true);
      } else {
        System.out.println("Failed replacing with super type, parameters follow.");
        System.out.println("Given type: " + subtype);
        System.out.println("Expected: " + supertype);
        result_14532009 = false;
      }

    }

    return result_14532009;
  }

  public boolean isWeak() {
    return true;
  }

  public IsApplicableStatus isApplicableSubtypeAndPattern(SNode node) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(node.getConcept().getQualifiedName(), this.getApplicableSubtypeConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public IsApplicableStatus isApplicableSupertypeAndPattern(SNode node) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(node.getConcept().getQualifiedName(), this.getApplicableSupertypeConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public String getApplicableSubtypeConceptFQName() {
    return "com.mbeddr.core.pointers.structure.PointerType";
  }

  public String getApplicableSupertypeConceptFQName() {
    return "com.mbeddr.core.pointers.structure.PointerType";
  }
}
