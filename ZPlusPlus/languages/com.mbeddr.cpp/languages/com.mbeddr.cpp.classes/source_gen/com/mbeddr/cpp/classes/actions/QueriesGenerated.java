package com.mbeddr.cpp.classes.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import jetbrains.mps.smodel.action.AbstractChildNodeSetter;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.ModelActions;
import jetbrains.mps.smodel.action.DefaultSimpleSubstituteAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import jetbrains.mps.smodel.action.SideTransformPreconditionContext;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.util.Computable;

public class QueriesGenerated {
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Field_4157133445514976457(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.Field");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        SNode wrappedConcept = SConceptOperations.findConceptDeclaration("com.mbeddr.core.expressions.structure.Type");
        IChildNodeSetter setter = new AbstractChildNodeSetter() {
          private SNode wrapNode(SNode nodeToWrap, SModel model, @Nullable EditorContext editorContext) {
            SNode ms = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.Field", null);
            SLinkOperations.setTarget(ms, "type", nodeToWrap, true);
            return ms;
          }

          public boolean returnSmallPart(SNode nodeToWrap) {
            return false;
          }

          @Override
          public SNode doExecute(SNode pn, SNode oc, SNode nc, @Nullable EditorContext editorContext) {
            SNode wrappedNode = wrapNode(nc, nc.getModel(), editorContext);
            _context.getChildSetter().execute(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedNode, editorContext);
            return (returnSmallPart(nc) ? nc : wrappedNode);
          }
        };
        ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildNodeSubstituteActions(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedConcept, setter, operationContext)));
      }
    }
    return result;
  }

  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_MethodArgument_4157133445515012358(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.MethodArgument");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        SNode wrappedConcept = SConceptOperations.findConceptDeclaration("com.mbeddr.core.expressions.structure.Type");
        IChildNodeSetter setter = new AbstractChildNodeSetter() {
          private SNode wrapNode(SNode nodeToWrap, SModel model, @Nullable EditorContext editorContext) {
            SNode ms = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.MethodArgument", null);
            SLinkOperations.setTarget(ms, "type", nodeToWrap, true);
            return ms;
          }

          public boolean returnSmallPart(SNode nodeToWrap) {
            return false;
          }

          @Override
          public SNode doExecute(SNode pn, SNode oc, SNode nc, @Nullable EditorContext editorContext) {
            SNode wrappedNode = wrapNode(nc, nc.getModel(), editorContext);
            _context.getChildSetter().execute(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedNode, editorContext);
            return (returnSmallPart(nc) ? nc : wrappedNode);
          }
        };
        ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildNodeSubstituteActions(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedConcept, setter, operationContext)));
      }
    }
    return result;
  }

  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_TemplatePrimitiveParameter_998890089994323728(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.TemplatePrimitiveParameter");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        SNode wrappedConcept = SConceptOperations.findConceptDeclaration("com.mbeddr.core.expressions.structure.PrimitiveType");
        IChildNodeSetter setter = new AbstractChildNodeSetter() {
          private SNode wrapNode(SNode nodeToWrap, SModel model, @Nullable EditorContext editorContext) {
            SNode p = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.TemplatePrimitiveParameter", null);
            SLinkOperations.setTarget(p, "type", nodeToWrap, true);
            return p;
          }

          public boolean returnSmallPart(SNode nodeToWrap) {
            return false;
          }

          @Override
          public SNode doExecute(SNode pn, SNode oc, SNode nc, @Nullable EditorContext editorContext) {
            SNode wrappedNode = wrapNode(nc, nc.getModel(), editorContext);
            _context.getChildSetter().execute(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedNode, editorContext);
            return (returnSmallPart(nc) ? nc : wrappedNode);
          }
        };
        ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildNodeSubstituteActions(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedConcept, setter, operationContext)));
      }
    }
    return result;
  }

  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_IClassMember_3487377644351300115(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.ClassDeclaration");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SLinkOperations.setNewChild(SNodeOperations.getAncestor(_context.getParentNode(), "com.mbeddr.cpp.classes.structure.ClassDeclaration", false, false), "privateMemberList", "com.mbeddr.cpp.classes.structure.PrivateMemberList");
            return SNodeOperations.getAncestor(_context.getParentNode(), "com.mbeddr.cpp.classes.structure.ClassDeclaration", false, false);

          }

          public String getMatchingText(String pattern) {
            return "private";
          }

          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    return result;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_Field_4157133445515077505(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.MethodDeclaration"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SNode m = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.MethodDeclaration", null);
        SLinkOperations.setTarget(m, "type", SNodeOperations.copyNode(SLinkOperations.getTarget(_context.getSourceNode(), "type", true)), true);
        SPropertyOperations.set(m, "name", SPropertyOperations.getString(_context.getSourceNode(), "name"));
        return SNodeOperations.replaceWithAnother(_context.getSourceNode(), m);
      }

      public String getMatchingText(String pattern) {
        return "(";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.MethodDeclaration"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.MethodDeclaration"), null));
      }
    });
    return result;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_Expression_4157133445515648336(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.OoDotExpression"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SNode m = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.OoDotExpression", null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(), m);
        return SLinkOperations.setTarget(m, "object", _context.getSourceNode(), true);
      }

      public String getMatchingText(String pattern) {
        return ".";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.OoDotExpression"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.OoDotExpression"), null));
      }
    });
    return result;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_Expression_4157133445515648372(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()), "com.mbeddr.cpp.classes.structure.ClassifierType");
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_OoMemberRef_1197032086774(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createSideTransformHintSubstituteActions(new Computable<SNode>() {
      public SNode compute() {
        return SNodeOperations.getParent(_context.getSourceNode());
      }
    }.compute(), _context.getSide(), _context.getTransformationTag(), operationContext)));
    return result;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_Expression_4157133445515664564(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.OoArrowExpression"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SNode m = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.OoArrowExpression", null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(), m);
        return SLinkOperations.setTarget(m, "object", _context.getSourceNode(), true);
      }

      public String getMatchingText(String pattern) {
        return "->";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.OoArrowExpression"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.OoArrowExpression"), null));
      }
    });
    return result;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_Expression_4157133445515664608(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()), "com.mbeddr.core.pointers.structure.PointerType") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.cpp.classes.structure.ClassifierType");
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_MethodArgument_610576951245936959(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.MethodArgument"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SLinkOperations.setNewChild(_context.getSourceNode(), "defaultValue", "com.mbeddr.core.expressions.structure.Expression");
        return SLinkOperations.getTarget(_context.getSourceNode(), "defaultValue", true);
      }

      public String getMatchingText(String pattern) {
        return "=";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.MethodArgument"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.MethodArgument"), null));
      }
    });
    return result;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_MethodArgument_610576951245937001(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SLinkOperations.getTarget(_context.getSourceNode(), "defaultValue", true) == null && (SNodeOperations.getAncestor(_context.getSourceNode(), "com.mbeddr.cpp.classes.structure.ClassDeclaration", false, false) != null);
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_TemplateClassParameter_1022708226502518417(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.TemplateClassParameter"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        return SLinkOperations.setNewChild(_context.getSourceNode(), "concept", "com.mbeddr.cpp.classes.structure.ConceptRef");
      }

      public String getMatchingText(String pattern) {
        return ":";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.TemplateClassParameter"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.TemplateClassParameter"), null));
      }
    });
    return result;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_Expression_487313117837132919(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.AsExpression"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        SNode ae = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.AsExpression", null);
        SNodeOperations.replaceWithAnother(_context.getSourceNode(), ae);
        SLinkOperations.setTarget(ae, "expr", _context.getSourceNode(), true);
        SLinkOperations.setTarget(ae, "destPointerType", SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null), true);
        return SLinkOperations.getTarget(ae, "destPointerType", true);
      }

      public String getMatchingText(String pattern) {
        return "as";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      public String getDescriptionText(String pattern) {
        return "dynamic cast";
      }

      @Override
      protected boolean isEnabled() {
        SNode sourceNode = getSourceNode();
        SNode parent = SNodeOperations.getParent(sourceNode);
        SNode containingLink = SNodeOperations.getContainingLinkDeclaration(sourceNode);
        return parent == null || containingLink == null || (ModelConstraints.canBeParent(parent, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.AsExpression"), containingLink, null, null) && ModelConstraints.canBeAncestor(parent, null, SConceptOperations.findConceptDeclaration("com.mbeddr.cpp.classes.structure.AsExpression"), null));
      }
    });
    return result;
  }
}
