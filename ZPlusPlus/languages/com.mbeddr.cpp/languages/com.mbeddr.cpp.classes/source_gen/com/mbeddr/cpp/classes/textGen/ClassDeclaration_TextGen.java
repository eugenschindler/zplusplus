package com.mbeddr.cpp.classes.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.textGen.TraceInfoGenerationUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.NodeCastException;
import jetbrains.mps.textGen.TextGenManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.apache.log4j.Priority;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ClassDeclaration_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    if (getBuffer().hasPositionsSupport()) {
      TraceInfoGenerationUtil.createPositionInfo(this, node);
    }

    for (SNode decl : SLinkOperations.getTargets(node, "friendDeclarations", true)) {
      try {
        SNode theFriendClass = SLinkOperations.getTarget(SNodeOperations.cast(decl, "com.mbeddr.cpp.classes.structure.FriendClassDeclaration"), "friendClass", false);
        if (theFriendClass != null) {
          // <node> 
          // <node> 
        }
      } catch (NodeCastException e) {
        continue;
      }

    }

    if (SLinkOperations.getTarget(node, "template", true) != null) {
      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "template", true), this.getSNode());
      this.appendNewLine();
    }
    this.append("class ");
    this.append(SPropertyOperations.getString(node, "name"));
    this.append(" ");

    if (ListSequence.fromList(SLinkOperations.getTargets(node, "inheritanceDefinitions", true)).isNotEmpty()) {
      this.append(": ");
      if (ListSequence.fromList(SLinkOperations.getTargets(node, "inheritanceDefinitions", true)).isNotEmpty()) {
        for (SNode item : SLinkOperations.getTargets(node, "inheritanceDefinitions", true)) {
          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());
          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, "inheritanceDefinitions", true)).last()) {
            this.append(", ");
          }
        }
      }
      this.append(" ");
    }


    this.append("{");
    this.appendNewLine();
    if (SLinkOperations.getTarget(node, "publicMemberList", true) != null) {
      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "publicMemberList", true), this.getSNode());
    }
    if (SLinkOperations.getTarget(node, "protectedMemberList", true) != null) {
      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "protectedMemberList", true), this.getSNode());
    }
    if (SLinkOperations.getTarget(node, "privateMemberList", true) != null) {
      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "privateMemberList", true), this.getSNode());
    }

    if (ListSequence.fromList(SLinkOperations.getTargets(node, "friendDeclarations", true)).count() > 0) {
      this.increaseDepth();
      // Friend functions 
      this.indentBuffer();
      this.append("public:");
      this.appendNewLine();
      this.increaseDepth();
      for (SNode friendDeclaration : ListSequence.fromList(SLinkOperations.getTargets(node, "friendDeclarations", true))) {
        this.indentBuffer();
        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), friendDeclaration, this.getSNode());
      }
      this.decreaseDepth();
      this.decreaseDepth();

    }

    this.append("};");
    this.appendNewLine();
    this.appendNewLine();

    if (getBuffer().hasPositionsSupport()) {
      {
        String traceableProperty = "";
        try {
          traceableProperty = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, "jetbrains.mps.lang.traceable.structure.TraceableConcept"), "virtual_getTraceableProperty_5067982036267369901", new Object[]{});
        } catch (Throwable t) {
          if (LOG.isEnabledFor(Priority.ERROR)) {
            LOG.error("Can't calculate traceable prorerty for a node " + node + ".", t);
          }
        }
        TraceInfoGenerationUtil.fillPositionInfo(this, node, traceableProperty);
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(ClassDeclaration_TextGen.class);
}
