package com.mbeddr.cpp.classes.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import com.mbeddr.cpp.cext.typesystem.CppWarningUtil;
import com.mbeddr.cpp.cext.behavior.CppImplementationModule_Behavior;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_namingConventionsDefined_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_namingConventionsDefined_NonTypesystemRule() {
  }

  public void applyRule(final SNode cppImplementationModule, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (CppWarningUtil.cppSpecificWarningsEnabled == false) {
      return;
    }



    SNode namingConventions = CppImplementationModule_Behavior.call_getNamingConventions_158014820112486891(cppImplementationModule);

    if (namingConventions == null) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(cppImplementationModule, "C++ naming conventions not defined", "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "158014820112468746", null, errorTarget);
      }
    }



  }

  public String getApplicableConceptFQName() {
    return "com.mbeddr.cpp.cext.structure.CppImplementationModule";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
