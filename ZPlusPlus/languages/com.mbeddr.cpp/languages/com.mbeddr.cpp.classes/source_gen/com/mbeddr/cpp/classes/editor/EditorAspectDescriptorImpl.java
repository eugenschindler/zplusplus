package com.mbeddr.cpp.classes.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AsExpression_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new ClassDeclaration_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new ClassRef_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new ClassRefExpr_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new ClassifierType_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Concept_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new ConceptRealizationClause_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new ConceptRef_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new ConceptRestrictedTemplateParameter_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new ConceptRestrictedTemplateParameterType_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new ConceptRestrictedTypeRefExpr_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new ConceptType_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new ConstructorCallExpression_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new ConstructorDeclaration_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new ConstructorImplementation_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new ConstructorInitializer_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new Cout_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new CppNamingConventions_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new DeleteArrayStatement_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new DeleteStatement_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new DestructorDeclaration_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new DestructorImplementation_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new Field_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new FieldAccessExpression_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new FieldInitializer_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new FriendClassDeclaration_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new FriendFunctionDeclaration_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new InheritanceDefinition_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new MethodArgument_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new MethodDeclaration_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new MethodImplementation_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new NewArrayExpression_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new NewExpression_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new OoArrowExpression_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new OoDotExpression_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new OoFieldAccess_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new OoMemberRef_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new OoMethodCall_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new OperatorDesignatorAbstract_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new OperatorOverloadingDeclaration_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new PrimitiveTemplateParamRef_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new PrimitiveTypeRefExpr_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new PrivateMemberList_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new ProtectedMemberList_Editor());
      case 44:
        return Collections.<ConceptEditor>singletonList(new PublicMemberList_Editor());
      case 45:
        return Collections.<ConceptEditor>singletonList(new Template_Editor());
      case 46:
        return Collections.<ConceptEditor>singletonList(new TemplateClassParameter_Editor());
      case 47:
        return Collections.<ConceptEditor>singletonList(new TemplateParamType_Editor());
      case 48:
        return Collections.<ConceptEditor>singletonList(new TemplatePrimitiveParameter_Editor());
      case 49:
        return Collections.<ConceptEditor>singletonList(new ThisExpression_Editor());
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b, descriptor.getConceptFqName())) {
      case 0:
        if ("com.mbeddr.cpp.classes.editor.methodSignature".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new methodSignature());
        }
        break;
      default:
    }
    return Collections.emptyList();
  }



  public Collection<ConceptEditorHint> getHints() {
    return Collections.emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"com.mbeddr.cpp.classes.structure.AsExpression", "com.mbeddr.cpp.classes.structure.ClassDeclaration", "com.mbeddr.cpp.classes.structure.ClassRef", "com.mbeddr.cpp.classes.structure.ClassRefExpr", "com.mbeddr.cpp.classes.structure.ClassifierType", "com.mbeddr.cpp.classes.structure.Concept", "com.mbeddr.cpp.classes.structure.ConceptRealizationClause", "com.mbeddr.cpp.classes.structure.ConceptRef", "com.mbeddr.cpp.classes.structure.ConceptRestrictedTemplateParameter", "com.mbeddr.cpp.classes.structure.ConceptRestrictedTemplateParameterType", "com.mbeddr.cpp.classes.structure.ConceptRestrictedTypeRefExpr", "com.mbeddr.cpp.classes.structure.ConceptType", "com.mbeddr.cpp.classes.structure.ConstructorCallExpression", "com.mbeddr.cpp.classes.structure.ConstructorDeclaration", "com.mbeddr.cpp.classes.structure.ConstructorImplementation", "com.mbeddr.cpp.classes.structure.ConstructorInitializer", "com.mbeddr.cpp.classes.structure.Cout", "com.mbeddr.cpp.classes.structure.CppNamingConventions", "com.mbeddr.cpp.classes.structure.DeleteArrayStatement", "com.mbeddr.cpp.classes.structure.DeleteStatement", "com.mbeddr.cpp.classes.structure.DestructorDeclaration", "com.mbeddr.cpp.classes.structure.DestructorImplementation", "com.mbeddr.cpp.classes.structure.Field", "com.mbeddr.cpp.classes.structure.FieldAccessExpression", "com.mbeddr.cpp.classes.structure.FieldInitializer", "com.mbeddr.cpp.classes.structure.FriendClassDeclaration", "com.mbeddr.cpp.classes.structure.FriendFunctionDeclaration", "com.mbeddr.cpp.classes.structure.InheritanceDefinition", "com.mbeddr.cpp.classes.structure.MethodArgument", "com.mbeddr.cpp.classes.structure.MethodDeclaration", "com.mbeddr.cpp.classes.structure.MethodImplementation", "com.mbeddr.cpp.classes.structure.NewArrayExpression", "com.mbeddr.cpp.classes.structure.NewExpression", "com.mbeddr.cpp.classes.structure.OoArrowExpression", "com.mbeddr.cpp.classes.structure.OoDotExpression", "com.mbeddr.cpp.classes.structure.OoFieldAccess", "com.mbeddr.cpp.classes.structure.OoMemberRef", "com.mbeddr.cpp.classes.structure.OoMethodCall", "com.mbeddr.cpp.classes.structure.OperatorDesignatorAbstract", "com.mbeddr.cpp.classes.structure.OperatorOverloadingDeclaration", "com.mbeddr.cpp.classes.structure.PrimitiveTemplateParamRef", "com.mbeddr.cpp.classes.structure.PrimitiveTypeRefExpr", "com.mbeddr.cpp.classes.structure.PrivateMemberList", "com.mbeddr.cpp.classes.structure.ProtectedMemberList", "com.mbeddr.cpp.classes.structure.PublicMemberList", "com.mbeddr.cpp.classes.structure.Template", "com.mbeddr.cpp.classes.structure.TemplateClassParameter", "com.mbeddr.cpp.classes.structure.TemplateParamType", "com.mbeddr.cpp.classes.structure.TemplatePrimitiveParameter", "com.mbeddr.cpp.classes.structure.ThisExpression"};
  private static String[] stringSwitchCases_xbvbvu_a0a0b = new String[]{"com.mbeddr.cpp.classes.structure.MethodDeclaration"};
}
