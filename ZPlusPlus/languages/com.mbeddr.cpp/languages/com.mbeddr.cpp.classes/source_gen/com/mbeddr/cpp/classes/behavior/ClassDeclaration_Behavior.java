package com.mbeddr.cpp.classes.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.ArrayList;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import com.mbeddr.cpp.classes.constraints.DebugClassConcept;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import com.mbeddr.cpp.cext.behavior.INamespaceProvider_Behavior;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ClassDeclaration_Behavior {
  public static void init(SNode thisNode) {
    SLinkOperations.setNewChild(thisNode, "publicMemberList", "com.mbeddr.cpp.classes.structure.PublicMemberList");
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "publicMemberList", true), "members", true)).addElement(SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.ConstructorDeclaration", null));


    // Creating copy constructor declaration 
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "publicMemberList", true), "members", true)).addElement(ClassDeclaration_Behavior.call_makeCopyConstructor_7540295501294914924(thisNode));

    // Assignment declaration 
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "publicMemberList", true), "members", true)).addElement(ClassDeclaration_Behavior.call_makeAssignmentOverload_7540295501294914853(thisNode));


  }

  public static SNode call_makeCopyConstructor_7540295501294914924(SNode thisNode) {
    SNode copyConstructor = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.ConstructorDeclaration", null);
    SPropertyOperations.set(copyConstructor, "explicit", "" + (false));
    SNode copyConstructorArgument = ArgUtil.makeMethodArgument(ArgUtil.makeClassConstRefType(thisNode), "originial");
    ListSequence.fromList(SLinkOperations.getTargets(copyConstructor, "args", true)).addElement(copyConstructorArgument);
    return copyConstructor;
  }

  public static SNode call_makeAssignmentOverload_7540295501294914853(SNode thisNode) {
    SNode assignmentOverload = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.OperatorOverloadingDeclaration", null);
    SLinkOperations.setTarget(assignmentOverload, "operatorDesignator", SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.AssignmentOperatorDesignator", null), true);
    SLinkOperations.setTarget(assignmentOverload, "type", ArgUtil.makeClassRefType(thisNode), true);
    SNode assignmArgument = ArgUtil.makeMethodArgument(ArgUtil.makeClassConstRefType(thisNode), "originial");
    ListSequence.fromList(SLinkOperations.getTargets(assignmentOverload, "args", true)).addElement(assignmArgument);

    return assignmentOverload;
  }

  public static Iterable<SNode> call_getInheritanceDefinitions_5516725038417390534(SNode thisNode) {
    if (SLinkOperations.getTargets(thisNode, "inheritanceDefinitions", true) == null) {
      return new ArrayList<SNode>();
    }
    return SLinkOperations.getTargets(thisNode, "inheritanceDefinitions", true);
  }

  public static Iterable<SNode> virtual_visibleContentsOfType_7139820346881179813(SNode thisNode, SNode targetConcept) {
    // Some stategy to respect encapsulation is needed 

    List<SNode> res = new ArrayList<SNode>();

    for (SNode content : ListSequence.fromList(SNodeOperations.getDescendants(thisNode, "com.mbeddr.cpp.classes.structure.ClassDeclaration", false, new String[]{}))) {
      if (SNodeOperations.isInstanceOf(content, NameUtil.nodeFQName(targetConcept))) {
        ListSequence.fromList(res).addElement(content);
      }
    }
    return res;
  }

  public static Iterable<SNode> call_getFriendFunctions_6865752029450021664(SNode thisNode) {

    List<SNode> res = new ArrayList<SNode>();

    if (SLinkOperations.getTargets(thisNode, "friendDeclarations", true) == null) {
      return res;
    }

    for (SNode friendDeclaration : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "friendDeclarations", true))) {
      if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), friendDeclaration, "virtual_getFriend_3152709411796856783", new Object[]{})), "com.mbeddr.core.modules.structure.Function")) {
        res.add(friendDeclaration);
      }
    }

    return res;
  }

  public static boolean call_hasFriend_6865752029450306607(SNode thisNode, SNode friend) {
    for (SNode friendDeclaration : SLinkOperations.getTargets(thisNode, "friendDeclarations", true)) {
      if (BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), friendDeclaration, "virtual_getFriend_3152709411796856783", new Object[]{}) == friend) {
        return true;
      }
    }

    return false;
  }

  public static Iterable<SNode> call_getDirectBaseClasses_5516725038417390708(SNode thisNode) {
    List<SNode> res = new ArrayList<SNode>();

    for (SNode node_InheritanceDefinition_ : ClassDeclaration_Behavior.call_getInheritanceDefinitions_5516725038417390534(thisNode)) {
      if (node_InheritanceDefinition_ != null) {
        if (SLinkOperations.getTarget(node_InheritanceDefinition_, "baseClass", false) != null) {
          ListSequence.fromList(res).addElement(SLinkOperations.getTarget(node_InheritanceDefinition_, "baseClass", false));
        }
      }
    }

    return res;
  }

  public static Iterable<SNode> call_growBaseClassesList_5516725038417419529(SNode thisNode, Iterable<SNode> initialClasses) {

    DebugClassConcept.DebudAllBasClassesAlgorithm("Initial base classes of " + thisNode + ": " + initialClasses);

    final int MAXIMAL_INHERITANCE_DEPTH = 20;

    Iterable<SNode> classesToAdd = new ArrayList<SNode>();
    for (int i = 0; i < MAXIMAL_INHERITANCE_DEPTH; ++i) {

      int sizeBeforeGrowing = Sequence.fromIterable(initialClasses).count();

      // Search for new direct base classes and add them 
      for (SNode node_Class_ : initialClasses) {

        Iterable<SNode> newBaseClasses = ClassDeclaration_Behavior.call_getDirectBaseClasses_5516725038417390708(node_Class_);
        DebugClassConcept.DebudAllBasClassesAlgorithm("New base classes from " + node_Class_ + ": " + newBaseClasses);
        classesToAdd = Sequence.fromIterable(classesToAdd).union(Sequence.fromIterable(newBaseClasses));
        DebugClassConcept.DebudAllBasClassesAlgorithm("Classes to add now: " + classesToAdd);
      }

      initialClasses = Sequence.fromIterable(initialClasses).union(Sequence.fromIterable(classesToAdd)).distinct();

      DebugClassConcept.DebudAllBasClassesAlgorithm("After growing step " + i + " all base classes are " + initialClasses);

      if (sizeBeforeGrowing == Sequence.fromIterable(initialClasses).count()) {
        break;
      }
    }

    return initialClasses;
  }

  public static void call_addPrivateMember_8616684942293673107(SNode thisNode, SNode m) {
    if (SLinkOperations.getTarget(thisNode, "privateMemberList", true) == null) {
      SLinkOperations.setNewChild(thisNode, "privateMemberList", "com.mbeddr.cpp.classes.structure.PrivateMemberList");
    }
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "privateMemberList", true), "members", true)).addElement(m);
  }

  public static void call_addProtectedMember_8616684942293673136(SNode thisNode, SNode m) {
    if (SLinkOperations.getTarget(thisNode, "protectedMemberList", true) == null) {
      SLinkOperations.setNewChild(thisNode, "protectedMemberList", "com.mbeddr.cpp.classes.structure.ProtectedMemberList");
    }
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "protectedMemberList", true), "members", true)).addElement(m);
  }

  public static Iterable<SNode> call_protectedMembers_8616684942293671703(SNode thisNode) {
    if (SLinkOperations.getTarget(thisNode, "protectedMemberList", true) == null) {
      return new ArrayList<SNode>();
    }
    return SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "protectedMemberList", true), "members", true);
  }

  public static Iterable<SNode> call_privateMembers_8616684942293671716(SNode thisNode) {
    if (SLinkOperations.getTarget(thisNode, "privateMemberList", true) == null) {
      return new ArrayList<SNode>();
    }
    return SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "privateMemberList", true), "members", true);
  }

  public static Iterable<SNode> virtual_members_1022708226502685371(SNode thisNode) {
    return Sequence.fromIterable(Classifier_Behavior.call_publicMembers_8616684942293671639(thisNode)).union(Sequence.fromIterable(ClassDeclaration_Behavior.call_protectedMembers_8616684942293671703(thisNode))).union(Sequence.fromIterable(ClassDeclaration_Behavior.call_privateMembers_8616684942293671716(thisNode)));
  }

  public static Iterable<SNode> call_membersVisibleToSubclasses_1118251489465143674(SNode thisNode) {
    return Sequence.fromIterable(ClassDeclaration_Behavior.call_protectedMembers_8616684942293671703(thisNode)).union(Sequence.fromIterable(Classifier_Behavior.call_publicMembers_8616684942293671639(thisNode)));
  }

  public static Iterable<SNode> call_visibleOverridableMethodsInProtected_1118251489465130731(SNode thisNode) {

    ICppMemberVisibilityStrategy visibilityStrategy = VisibilityStrategyFactory.getStrategy();

    return Sequence.fromIterable(visibilityStrategy.getAllProtectedMembers(thisNode)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "com.mbeddr.cpp.classes.structure.MethodDeclaration");
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getBoolean(it, "virtual");
      }
    });
  }

  public static Iterable<SNode> call_visibleOverridableMethodsInPublic_1118251489465143846(SNode thisNode) {
    ICppMemberVisibilityStrategy visibilityStrategy = VisibilityStrategyFactory.getStrategy();


    Iterable<SNode> res = Sequence.fromIterable(visibilityStrategy.getAllPublicMembers(thisNode)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "com.mbeddr.cpp.classes.structure.MethodDeclaration");
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getBoolean(it, "virtual");
      }
    }).union(Sequence.fromIterable(ClassDeclaration_Behavior.call_visibleOverridableMethodsInProtected_1118251489465130731(thisNode)));


    DebugClassConcept.DebugClassBehavior("Visible overridable methods of " + thisNode + " : " + res);

    return res;
  }

  public static List<SNode> call_allCtors_2160207330153013366(SNode thisNode) {
    List<SNode> res = new ArrayList<SNode>();
    for (SNode it : Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), thisNode, "virtual_allMembersOfThisClassOnly_1022708226502685404", new Object[]{}))) {
      {
        SNode ctor = it;
        if (SNodeOperations.isInstanceOf(ctor, "com.mbeddr.cpp.classes.structure.ConstructorDeclaration")) {
          ListSequence.fromList(res).addElement(ctor);
        }
      }
    }
    return res;
  }

  public static int virtual_sortWeight_7999989049973036118(SNode thisNode) {
    return 20000 + ListSequence.fromList(SLinkOperations.getTargets(thisNode, "inheritanceDefinitions", true)).count();
  }

  public static SNode call_findTemplate_8112533365322924359(SNode thisNode) {
    SNode template = SLinkOperations.getTarget(thisNode, "template", true);
    while (template == null) {
      SNode ancestor = SNodeOperations.getAncestor(thisNode, "com.mbeddr.cpp.classes.structure.ICanDeclareTemplate", false, false);

      if (ancestor == null) {
        return null;
      }

      template = SLinkOperations.getTarget(ancestor, "template", true);

    }
    return template;
  }

  public static boolean call_declaresRealization_1022708226504868257(SNode thisNode, final SNode c) {
    return SLinkOperations.getTarget(thisNode, "realization", true) != null && ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "realization", true), "concepts", true)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "concept", false) == c;
      }
    });
  }

  public static Iterable<SNode> virtual_allMembersOfThisClassOnly_1022708226502685404(SNode thisNode) {
    return Sequence.fromIterable(ClassDeclaration_Behavior.call_privateMembers_8616684942293671716(thisNode)).union(Sequence.fromIterable(ClassDeclaration_Behavior.call_protectedMembers_8616684942293671703(thisNode))).union(Sequence.fromIterable(Classifier_Behavior.call_publicMembers_8616684942293671639(thisNode)));
  }

  public static boolean call_isAbstract_4518568022543321676(SNode thisNode) {

    DebugClassConcept.DebugClassBehavior("Testing if the class " + thisNode + " is abstract");

    Iterable<SNode> methodDeclarationsInThis = Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), thisNode, "virtual_allMembersOfThisClassOnly_1022708226502685404", new Object[]{})).ofType(SNode.class);

    if (Sequence.fromIterable(methodDeclarationsInThis).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getBoolean(it, "pureVirtual");
      }
    })) {
      DebugClassConcept.DebugClassBehavior("Class " + thisNode + " is abstract because contains abstract methods");
      return true;
    }

    for (SNode directBaseClass : Sequence.fromIterable(ClassDeclaration_Behavior.call_getDirectBaseClasses_5516725038417390708(thisNode))) {
      if (ClassDeclaration_Behavior.call_isAbstract_4518568022543321676(directBaseClass)) {
        DebugClassConcept.DebugClassBehavior("Found abstract direct base class: " + directBaseClass);
        for (SNode pureVirtualMethodOfBase : Sequence.fromIterable(ClassDeclaration_Behavior.call_membersVisibleToSubclasses_1118251489465143674(directBaseClass)).ofType(SNode.class).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SPropertyOperations.getBoolean(it, "pureVirtual");
          }
        })) {

          DebugClassConcept.DebugClassBehavior("The abstract method to test: " + pureVirtualMethodOfBase);

          if (!(ClassDeclaration_Behavior.call_implementsMethod_4518568022543444426(thisNode, pureVirtualMethodOfBase))) {
            DebugClassConcept.DebugClassBehavior(" - is NOT implemented");
            DebugClassConcept.DebugClassBehavior("The class is abstract!");
            return true;
          } else {
            DebugClassConcept.DebugClassBehavior(" - is implemented");
          }

        }
      }
    }

    DebugClassConcept.DebugClassBehavior("The class is not abstract");
    return false;
  }

  public static boolean call_implementsMethodItself_4518568022543444314(SNode thisNode, final SNode method) {
    Iterable<SNode> methodDeclarationsInThis = Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), thisNode, "virtual_allMembersOfThisClassOnly_1022708226502685404", new Object[]{})).ofType(SNode.class);
    return Sequence.fromIterable(methodDeclarationsInThis).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "overriddenMethod", false) == method && SPropertyOperations.getBoolean(it, "pureVirtual") == false;
      }
    });
  }

  public static boolean call_implementsMethod_4518568022543444426(SNode thisNode, final SNode method) {

    if (ClassDeclaration_Behavior.call_implementsMethodItself_4518568022543444314(thisNode, method)) {
      return true;
    }

    return Sequence.fromIterable(ClassDeclaration_Behavior.call_getAllBaseClasses_5516725038417419344(thisNode)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ClassDeclaration_Behavior.call_implementsMethod_4518568022543444426(it, method);
      }
    });
  }

  public static Iterable<SNode> virtual_externallyVisibleMembers_1022708226502685437(SNode thisNode) {
    ICppMemberVisibilityStrategy visibilityStrategy = VisibilityStrategyFactory.getStrategy();

    return visibilityStrategy.getVisibleOutsideMembers(thisNode);
  }

  public static Iterable<SNode> call_getAllBaseClasses_5516725038417419344(final SNode thisNode) {
    Iterable<SNode> res = new ArrayList<SNode>();

    res = Sequence.fromIterable(res).union(Sequence.fromIterable(ClassDeclaration_Behavior.call_getDirectBaseClasses_5516725038417390708(thisNode)).distinct());

    // To not have a cycle 
    res = Sequence.fromIterable(res).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return it != thisNode;
      }
    });
    res = ClassDeclaration_Behavior.call_growBaseClassesList_5516725038417419529(thisNode, res);

    return res;
  }

  public static Iterable<SNode> virtual_allSuperclasses_1022708226502698814(SNode thisNode) {
    return ClassDeclaration_Behavior.call_getAllBaseClasses_5516725038417419344(thisNode);
  }

  public static Iterable<SNode> call_classesDeclaringFriendshipWith_3152709411796917877(final SNode thisNode, SNode contextNode) {
    Iterable<SNode> res = VisibilityHelper.getVisibleClasses(contextNode);

    return Sequence.fromIterable(res).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ClassDeclaration_Behavior.call_hasFriend_6865752029450306607(it, thisNode);
      }
    });
  }

  public static String virtual_getPresentationAfterNamespaceResolutionOperator_4315577761883429928(SNode thisNode) {
    return SPropertyOperations.getString(thisNode, "name");
  }

  public static Iterable<SNode> virtual_getAllContents_4315577761883431846(SNode thisNode) {
    return INamespaceProvider_Behavior.call_getContents_8928893569897447072(thisNode);
  }

  public static boolean call_isAssignable_7540295501294968212(SNode thisNode) {
    // inheritance does not count - may need updates! 
    return !(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "privateMemberList", true), "members", true)).ofType(SNode.class).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return OperatorOverloadingDeclaration_Behavior.call_isAssignmentOverload_7540295501294891381(it);
      }
    }) || ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "protectedMemberList", true), "members", true)).ofType(SNode.class).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return OperatorOverloadingDeclaration_Behavior.call_isAssignmentOverload_7540295501294891381(it);
      }
    }));
  }

  public static boolean call_isCopyable_7540295501294968521(SNode thisNode) {
    return !(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "privateMemberList", true), "members", true)).ofType(SNode.class).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ConstructorDeclaration_Behavior.call_isCopyConstructor_7540295501294914990(it);
      }
    }));
  }

  public static void call_removeDeclarationsForCopyingAndAssignment_7540295501295123293(SNode thisNode) {
    List<SNode> memLists = new ArrayList<SNode>();

    if ((SLinkOperations.getTarget(thisNode, "protectedMemberList", true) != null)) {
      ListSequence.fromList(memLists).addElement(SLinkOperations.getTarget(thisNode, "protectedMemberList", true));
    }

    if ((SLinkOperations.getTarget(thisNode, "publicMemberList", true) != null)) {
      ListSequence.fromList(memLists).addElement(SLinkOperations.getTarget(thisNode, "publicMemberList", true));

    }

    if ((SLinkOperations.getTarget(thisNode, "privateMemberList", true) != null)) {
      ListSequence.fromList(memLists).addElement(SLinkOperations.getTarget(thisNode, "privateMemberList", true));
    }

    List<SNode> declsToDelete = new ArrayList<SNode>();

    for (SNode memlist : ListSequence.fromList(memLists)) {
      for (SNode member : ListSequence.fromList(SLinkOperations.getTargets(memlist, "members", true))) {
        if (SNodeOperations.isInstanceOf(member, "com.mbeddr.cpp.classes.structure.ConstructorDeclaration")) {
          if (ConstructorDeclaration_Behavior.call_isCopyConstructor_7540295501294914990(SNodeOperations.as(member, "com.mbeddr.cpp.classes.structure.ConstructorDeclaration"))) {
            ListSequence.fromList(declsToDelete).addElement(member);
          }
        } else {
          if (SNodeOperations.isInstanceOf(member, "com.mbeddr.cpp.classes.structure.OperatorOverloadingDeclaration")) {
            if (OperatorOverloadingDeclaration_Behavior.call_isAssignmentOverload_7540295501294891381(SNodeOperations.as(member, "com.mbeddr.cpp.classes.structure.OperatorOverloadingDeclaration"))) {
              ListSequence.fromList(declsToDelete).addElement(member);
            }
          }
        }
      }
    }

    for (SNode classMember : ListSequence.fromList(declsToDelete)) {
      for (SNode memlist : ListSequence.fromList(memLists)) {
        if (ListSequence.fromList(SLinkOperations.getTargets(memlist, "members", true)).contains(classMember)) {
          ListSequence.fromList(SLinkOperations.getTargets(memlist, "members", true)).removeElement(classMember);
          continue;
        }
      }
    }
  }

  public static Iterable<SNode> virtual_getContents_8928893569897447072(SNode thisNode) {
    return SNodeOperations.getDescendants(thisNode, "com.mbeddr.cpp.classes.structure.ClassDeclaration", false, new String[]{});
  }

  public static SNode call_getPublicSection_158014820112639961(SNode thisNode) {

    if (SLinkOperations.getTarget(thisNode, "publicMemberList", true) == null) {
      SLinkOperations.setTarget(thisNode, "publicMemberList", SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.PublicMemberList", null), true);
    }

    return SLinkOperations.getTarget(thisNode, "publicMemberList", true);
  }

  public static boolean virtual_exportable_6584628407655574574(SAbstractConcept thisConcept) {
    return true;
  }
}
