package com.mbeddr.cpp.classes.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import com.mbeddr.cpp.classes.typesystem.TypingHelper;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class IMethodOrConsCall_Behavior {
  public static void init(SNode thisNode) {
  }

  public static Iterable<SNode> virtual_findSuitableMethodOverloads_2015268598020361784(SNode thisNode, boolean internal, SNode objectType) {
    TypingHelper th = new TypingHelper();
    List<SNode> candidateMethods = new ArrayList<SNode>();
    SNode targetType = SLinkOperations.getTarget(objectType, "cls", false);
    Iterable<SNode> sameNamedMethods = IMethodOrConsCall_Behavior.call_findSiblings_2015268598020361833(thisNode, targetType, SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "methodOrConstructor", false), "name"), internal);
    for (SNode s : Sequence.fromIterable(sameNamedMethods)) {
      int actualArgCount = ListSequence.fromList(SLinkOperations.getTargets(thisNode, "actuals", true)).count();
      if (actualArgCount >= AbstractMethodDeclaration_Behavior.call_minSuppliedArgCount_610576951245963101(s) && actualArgCount <= AbstractMethodDeclaration_Behavior.call_maxSuppliedArgCount_610576951245963106(s)) {
        boolean allMatch = true;
        for (SNode actual : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "actuals", true))) {
          SNode formal = ListSequence.fromList(SLinkOperations.getTargets(s, "args", true)).getElement(SNodeOperations.getIndexInParent(actual));
          SNode actualType = TypeChecker.getInstance().getTypeOf(actual);
          SNode declaredFormalType = SLinkOperations.getTarget(formal, "type", true);
          SNode realFormalType = declaredFormalType;
          if (BehaviorReflection.invokeVirtual(Boolean.TYPE, objectType, "virtual_isTemplated_8616684942293462842", new Object[]{}) && th.hasTemplateParameterInType(declaredFormalType)) {
            realFormalType = th.detemplatifyType(declaredFormalType, targetType, objectType);
          }
          if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(actualType, realFormalType))) {
            allMatch = false;
          }
        }
        if (allMatch) {
          ListSequence.fromList(candidateMethods).addElement(s);
        }
      }
    }
    return candidateMethods;
  }

  @Deprecated
  public static Iterable<SNode> call_findSuitableMethodOverloads_2015268598020361784(SNode thisNode, boolean internal, SNode objectType) {
    return BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), thisNode, "virtual_findSuitableMethodOverloads_2015268598020361784", new Object[]{internal, objectType});
  }

  @Deprecated
  public static Iterable<SNode> callSuper_findSuitableMethodOverloads_2015268598020361784(SNode thisNode, String callerConceptFqName, boolean internal, SNode objectType) {
    return BehaviorManager.getInstance().invokeSuper((Class<Iterable<SNode>>) ((Class) Object.class), SNodeOperations.cast(thisNode, "com.mbeddr.cpp.classes.structure.IMethodOrConsCall"), callerConceptFqName, "virtual_findSuitableMethodOverloads_2015268598020361784", new Class[]{SNode.class, Boolean.TYPE, SNode.class}, new Object[]{internal, objectType});
  }

  @Deprecated
  public static Iterable<SNode> call_findSiblings_2015268598020361833(SNode thisNode, SNode clazz, String name, boolean internal) {
    return BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), thisNode, "virtual_findSiblings_2015268598020361833", new Object[]{clazz, name, internal});
  }

  @Deprecated
  public static Iterable<SNode> callSuper_findSiblings_2015268598020361833(SNode thisNode, String callerConceptFqName, SNode clazz, String name, boolean internal) {
    return BehaviorManager.getInstance().invokeSuper((Class<Iterable<SNode>>) ((Class) Object.class), SNodeOperations.cast(thisNode, "com.mbeddr.cpp.classes.structure.IMethodOrConsCall"), callerConceptFqName, "virtual_findSiblings_2015268598020361833", new Class[]{SNode.class, SNode.class, String.class, Boolean.TYPE}, new Object[]{clazz, name, internal});
  }
}
