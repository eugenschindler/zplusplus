package com.mbeddr.cpp.classes.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import com.mbeddr.cpp.classes.behavior.IClassMember_Behavior;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class togglePureVirtual_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public togglePureVirtual_Intention() {
  }

  public String getConcept() {
    return "com.mbeddr.cpp.classes.structure.MethodDeclaration";
  }

  public String getPresentation() {
    return "togglePureVirtual";
  }

  public String getPersistentStateKey() {
    return "com.mbeddr.cpp.classes.intentions.togglePureVirtual_Intention";
  }

  public String getLanguageFqName() {
    return "com.mbeddr.cpp.classes";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return IClassMember_Behavior.call_isPrivate_610576951245844024(node) == false;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:82dd6aa6-7b0e-4d3f-ac7e-a3ce4807a3b1(com.mbeddr.cpp.classes.intentions)", "4518568022543209163");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new togglePureVirtual_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Toggle Pure Virtual";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      if (SPropertyOperations.getBoolean(node, "pureVirtual")) {
        SPropertyOperations.set(node, "pureVirtual", "" + (false));
      } else {
        SPropertyOperations.set(node, "virtual", "" + (true));
        SPropertyOperations.set(node, "pureVirtual", "" + (true));
      }
    }

    public IntentionDescriptor getDescriptor() {
      return togglePureVirtual_Intention.this;
    }
  }
}
