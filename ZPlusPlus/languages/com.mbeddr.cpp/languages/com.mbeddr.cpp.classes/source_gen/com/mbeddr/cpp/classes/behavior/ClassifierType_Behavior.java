package com.mbeddr.cpp.classes.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ClassifierType_Behavior {
  public static void init(SNode thisNode) {
  }

  public static String virtual_getPresentation_1213877396640(SNode thisNode) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "cls", false), "name") + ((BehaviorReflection.invokeVirtual(Boolean.TYPE, thisNode, "virtual_isTemplated_8616684942293462842", new Object[]{}) ? BehaviorReflection.invokeVirtual(String.class, thisNode, "virtual_getTemplateSignature_8616684942293463200", new Object[]{}) : ""));
  }

  public static boolean virtual_canBeConst_2941277002447374595(SNode thisNode) {
    return false;
  }

  public static boolean virtual_canBeVolatile_2941277002449781628(SNode thisNode) {
    return false;
  }

  public static SNode virtual_getClassDeclaration_1022708226504867673(SNode thisNode) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "cls", false), "com.mbeddr.cpp.classes.structure.ClassDeclaration")) {
      return SNodeOperations.cast(SLinkOperations.getTarget(thisNode, "cls", false), "com.mbeddr.cpp.classes.structure.ClassDeclaration");
    }
    return null;
  }

  public static boolean virtual_requiresTemplateActuals_8616684942293462854(SNode thisNode) {
    return BehaviorReflection.invokeVirtual(Boolean.TYPE, SLinkOperations.getTarget(thisNode, "cls", false), "virtual_residesInTemplateContext_998890089994455159", new Object[]{});
  }

  public static SNode call_getPassingOverloadForBinExpr_3285537971613386608(SNode thisNode, SNode be) {
    // TODO Actually question here, which members to take! 
    for (SNode overloadDeclaration : SNodeOperations.getDescendants(SLinkOperations.getTarget(thisNode, "cls", false), "com.mbeddr.cpp.classes.structure.OperatorOverloadingDeclaration", false, new String[]{})) {
      if (OperatorOverloadingDeclaration_Behavior.call_supportsBinaryExpression_8489939682834809711(overloadDeclaration, be)) {
        return overloadDeclaration;
      }
    }
    return null;
  }

  public static boolean virtual_isAllowedInBinaryExpression_892278390190633819(SNode thisNode, SNode be) {

    DebugOperatorOverloadingBehaviorAllowance.debug("Class Type is asked about Binary Expression");

    if (ClassifierType_Behavior.call_getPassingOverloadForBinExpr_3285537971613386608(thisNode, be) != null) {
      return true;
    }

    return false;
  }

  public static SNode virtual_getTypeOfOperation_206521942260333428(SNode thisNode, SNode be) {

    DebugOperatorOverloadingBehaviorTyping.debug("getTypeOfOperation() in ClassType works");

    SNode passingOverload = ClassifierType_Behavior.call_getPassingOverloadForBinExpr_3285537971613386608(thisNode, be);

    if (passingOverload == null) {
      return null;
    }

    return SNodeOperations.copyNode(SLinkOperations.getTarget(passingOverload, "type", true));
  }

  public static SNode call_getPassingIndexOverload_5855706895499781637(SNode thisNode, SNode aae) {

    DebugArayAccessExpression.debug("Searching passing overload for " + aae);

    for (SNode overloadDeclaration : SNodeOperations.getDescendants(SLinkOperations.getTarget(thisNode, "cls", false), "com.mbeddr.cpp.classes.structure.OperatorOverloadingDeclaration", false, new String[]{})) {
      DebugArayAccessExpression.debug("Checking " + overloadDeclaration);
      if (OperatorOverloadingDeclaration_Behavior.call_supportsArrayAccess_5855706895499748900(overloadDeclaration)) {
        DebugArayAccessExpression.debug("Supports!");
        if (SLinkOperations.getTarget(aae, "index", true) == null) {
          return overloadDeclaration;
        } else {
          DebugArayAccessExpression.debug("Skipping arg type check - found!");
          return overloadDeclaration;
          // <node> 
          // Here right comparison with helper is needed 
          // <node> 
          // else continue 
          // <node> 
        }

      }
    }
    DebugArayAccessExpression.debug("Returning null - not found");
    return null;
  }

  public static boolean virtual_isAllowedInExpression_3285537971614217179(SNode thisNode, SNode aae) {
    SNode passignDeclaration = ClassifierType_Behavior.call_getPassingIndexOverload_5855706895499781637(thisNode, aae);
    return passignDeclaration != null;
  }

  public static SNode virtual_getTypeOfOperation_3285537971614217186(SNode thisNode, SNode aae) {
    SNode passignDeclaration = ClassifierType_Behavior.call_getPassingIndexOverload_5855706895499781637(thisNode, aae);

    if (passignDeclaration != null) {
      return SNodeOperations.copyNode(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(passignDeclaration, "args", true)).getElement(0), "type", true));
    }
    return null;
  }
}
