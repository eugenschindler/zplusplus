package com.mbeddr.cpp.classes.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntentionsDescriptor;
import jetbrains.mps.project.structure.modules.ModuleReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.intentions.IntentionsManager;

public class IntentionsDescriptor extends BaseIntentionsDescriptor {
  public IntentionsDescriptor() {
    super(new ModuleReference("31b871c8-3ba6-4751-8c9e-b20f99ee6b69(com.mbeddr.cpp.classes)"), PersistenceFacade.getInstance().createModelReference("r:82dd6aa6-7b0e-4d3f-ac7e-a3ce4807a3b1(com.mbeddr.cpp.classes.intentions)"));
  }

  public void init() {
    IntentionsManager.getInstance().registerIntentionFactory(new addBaseClass_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new addFriendClass_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new addFriendFunction_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new addPrivateSection_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new addProtectedSection_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new addPublicSection_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new addRealization_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new createConstructorImplementation_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new createCppNamingConventions_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new createDestructorImplementation_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new createGetterAndSetter_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new createMethodImplementation_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new makeClassNotCopiableNotAssignable_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new makeCopiableAssignable_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new makePrivate_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new makeProtected_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new makePublic_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new override_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new overrideMethod_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new renameFieldConventionally_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new templatize_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new toggleExplicit_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new toggleOrdered_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new togglePureVirtual_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new toggleVirtual_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new wrapWithNew_Intention());
  }
}
