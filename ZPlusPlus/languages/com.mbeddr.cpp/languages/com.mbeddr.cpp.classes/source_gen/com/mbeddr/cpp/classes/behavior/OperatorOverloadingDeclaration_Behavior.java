package com.mbeddr.cpp.classes.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class OperatorOverloadingDeclaration_Behavior {
  public static void init(SNode thisNode) {
  }

  public static boolean call_supportsBinaryExpression_8489939682834809711(SNode thisNode, SNode be) {

    DebugOperatorOverloadingBehaviorAllowance.debug("The binary expr to test: " + be);
    DebugOperatorOverloadingBehaviorAllowance.debug("The op designator: " + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(thisNode, "operatorDesignator", true)), "conceptAlias"));

    return SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(be), "conceptAlias").contentEquals(SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(thisNode, "operatorDesignator", true)), "conceptAlias"));
  }

  public static boolean call_supportsArrayAccess_5855706895499748900(SNode thisNode) {
    return SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(thisNode, "operatorDesignator", true)), "conceptAlias").contentEquals("[]");
  }

  public static boolean call_isAssignmentOverload_7540295501294891381(SNode thisNode) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "operatorDesignator", true), "com.mbeddr.cpp.classes.structure.AssignmentOperatorDesignator");
  }
}
