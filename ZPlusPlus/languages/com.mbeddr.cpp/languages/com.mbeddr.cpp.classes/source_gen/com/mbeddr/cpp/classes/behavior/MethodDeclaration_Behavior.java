package com.mbeddr.cpp.classes.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class MethodDeclaration_Behavior {
  public static void init(SNode thisNode) {
    SPropertyOperations.set(thisNode, "pureVirtual", "" + (false));
    SPropertyOperations.set(thisNode, "virtual", "" + (false));
    SPropertyOperations.set(thisNode, "overrides", "" + (false));
    SLinkOperations.setTarget(thisNode, "overriddenMethod", null, false);
  }

  public static boolean call_isInSyncWithOverriddenMethod_610576951245882520(final SNode thisNode) {
    if (SLinkOperations.getTarget(thisNode, "overriddenMethod", false) == null) {
      return true;
    }
    boolean nameOk = SPropertyOperations.getString(thisNode, "name").equals(SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "overriddenMethod", false), "name"));
    boolean typeOk = SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(thisNode, "type", true)), "name").equals(SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "overriddenMethod", false), "type", true)), "name"));
    boolean argCountOk = ListSequence.fromList(SLinkOperations.getTargets(thisNode, "args", true)).count() == ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "overriddenMethod", false), "args", true)).count();
    boolean argsOk = false;
    if (argCountOk) {
      argsOk = ListSequence.fromList(SLinkOperations.getTargets(thisNode, "args", true)).all(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(it, "type", true)), "name").equals(SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "overriddenMethod", false), "args", true)).getElement(SNodeOperations.getIndexInParent(it)), "type", true)), "name"));
        }
      });
    }
    return nameOk && typeOk && argCountOk && argsOk;
  }

  public static void call_synchronizeWithOverriddenMethod_1118251489465130798(SNode thisNode) {
    if (SLinkOperations.getTarget(thisNode, "overriddenMethod", false) == null) {
      return;
    }
    SLinkOperations.setTarget(thisNode, "type", SNodeOperations.copyNode(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "overriddenMethod", false), "type", true)), true);
    SPropertyOperations.set(thisNode, "name", SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "overriddenMethod", false), "name"));
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "args", true)).clear();
    for (SNode a : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "overriddenMethod", false), "args", true))) {
      ListSequence.fromList(SLinkOperations.getTargets(thisNode, "args", true)).addElement(SNodeOperations.copyNode(a));
    }
  }

  public static SNode call_generateImplementation_158014820112639916(SNode thisNode) {
    SNode mi = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.MethodImplementation", null);
    SNode topClass = SNodeOperations.getAncestor(thisNode, "com.mbeddr.cpp.classes.structure.ClassDeclaration", false, false);
    while (SNodeOperations.getAncestor(topClass, "com.mbeddr.cpp.classes.structure.ClassDeclaration", false, false) != null) {
      topClass = SNodeOperations.getAncestor(topClass, "com.mbeddr.cpp.classes.structure.ClassDeclaration", false, false);
    }
    SNodeOperations.insertNextSiblingChild(topClass, mi);
    SLinkOperations.setTarget(mi, "method", thisNode, false);
    MethodImplementation_Behavior.call_synchronizeWithSpec_4157133445515001280(mi);
    return mi;
  }
}
