package com.mbeddr.cpp.classes.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class toggleVirtual_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public toggleVirtual_Intention() {
  }

  public String getConcept() {
    return "com.mbeddr.cpp.classes.structure.AbstractMethodDeclaration";
  }

  public String getPresentation() {
    return "toggleVirtual";
  }

  public String getPersistentStateKey() {
    return "com.mbeddr.cpp.classes.intentions.toggleVirtual_Intention";
  }

  public String getLanguageFqName() {
    return "com.mbeddr.cpp.classes";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return !(SConceptOperations.isSubConceptOf(SNodeOperations.getConceptDeclaration(node), "com.mbeddr.cpp.classes.structure.ConstructorDeclaration"));
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:82dd6aa6-7b0e-4d3f-ac7e-a3ce4807a3b1(com.mbeddr.cpp.classes.intentions)", "4157133445515143796");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new toggleVirtual_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Toggle Virtual";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SPropertyOperations.set(node, "virtual", "" + (!(SPropertyOperations.getBoolean(node, "virtual"))));

      if (!(SPropertyOperations.getBoolean(node, "virtual"))) {
        if (SNodeOperations.isInstanceOf(node, "com.mbeddr.cpp.classes.structure.MethodDeclaration")) {
          SPropertyOperations.set(SNodeOperations.as(node, "com.mbeddr.cpp.classes.structure.MethodDeclaration"), "pureVirtual", "" + (false));
        }
      }
    }

    public IntentionDescriptor getDescriptor() {
      return toggleVirtual_Intention.this;
    }
  }
}
