package com.mbeddr.cpp.classes.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.mbeddr.cpp.classes.behavior.ClassDeclaration_Behavior;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.apache.log4j.Priority;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.SNodePointer;

public class ClassDeclaration_Constraints extends BaseConstraintsDescriptor {
  public ClassDeclaration_Constraints() {
    super("com.mbeddr.cpp.classes.structure.ClassDeclaration");
  }

  @Override
  public boolean hasOwnCanBeParentMethod() {
    return true;
  }

  @Override
  public boolean canBeParent(SNode node, @Nullable SNode childNode, SNode childConcept, SNode link, IOperationContext operationContext, @Nullable CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAParent(node, childNode, childConcept, link, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeParentBreakingPoint);
    }

    return result;
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("shortDescription", new BasePropertyConstraintsDescriptor("shortDescription", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "shortDescription";
        return BehaviorReflection.invokeVirtual(String.class, node, "virtual_shortDescriptionForCCMenu_5470497459578304992", new Object[]{});
      }
    });
    return properties;
  }

  public static boolean static_canBeAParent(SNode node, SNode childNode, SNode childConcept, SNode link, final IOperationContext operationContext) {
    if (SConceptOperations.isExactly(childConcept, "com.mbeddr.cpp.classes.structure.InheritanceDefinition")) {

      if ((childNode == null)) {
        return true;
      }


      SNode theClass = SNodeOperations.cast(node, "com.mbeddr.cpp.classes.structure.ClassDeclaration");

      Iterable<SNode> baseClasses = ClassDeclaration_Behavior.call_getDirectBaseClasses_5516725038417390708(SNodeOperations.cast(node, "com.mbeddr.cpp.classes.structure.ClassDeclaration"));

      // Do not inherit the same class twice 
      DebugClassConcept.DebugClassConstraints("Starting the check");
      DebugClassConcept.DebugClassConstraints("The node as Class : " + SNodeOperations.cast(node, "com.mbeddr.cpp.classes.structure.ClassDeclaration"));

      Iterable<SNode> distinct = Sequence.fromIterable(baseClasses).distinct();

      DebugClassConcept.DebugClassConstraints("Base classes: " + baseClasses);
      DebugClassConcept.DebugClassConstraints("Distinct: " + distinct);

      if (Sequence.fromIterable(distinct).count() < Sequence.fromIterable(baseClasses).count()) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Not allowed to inherit from the same class many times" + " in Class Constraints");
        }
        return false;
      }
      // done 



      // do not inherit itself 
      if (Sequence.fromIterable(baseClasses).contains(theClass)) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Not allowed to inherit itself in Class Constraints");
        }
        return false;
      }

      // have no circular inheritance 

      if (Sequence.fromIterable(ClassDeclaration_Behavior.call_getAllBaseClasses_5516725038417419344(theClass)).contains(theClass)) {
        if (LOG.isEnabledFor(Priority.ERROR)) {
          LOG.error("Circular inheritance not allowed in Class Constraints");
        }
        return false;
      }


    }


    return true;
  }

  protected static Logger LOG = LogManager.getLogger(ClassDeclaration_Constraints.class);
  private static SNodePointer canBeParentBreakingPoint = new SNodePointer("r:5713504b-b269-4946-8fca-49fcca934ac1(com.mbeddr.cpp.classes.constraints)", "5830540037510713826");
}
