package com.mbeddr.cpp.classes.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.mbeddr.cpp.classes.behavior.ClassDeclaration_Behavior;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_ITemplateInstantiator_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_ITemplateInstantiator_NonTypesystemRule() {
  }

  public void applyRule(final SNode iti, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode targetClass = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), iti, "virtual_getClassDeclaration_1022708226504867673", new Object[]{});
    if (ListSequence.fromList(SLinkOperations.getTargets(iti, "templateActuals", true)).count() != Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), targetClass, "virtual_getAllTemplateParameters_7069250747273260302", new Object[]{})).count()) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(iti, "template argument count does not match." + SLinkOperations.getTargets(SLinkOperations.getTarget(targetClass, "template", true), "parameters", true), "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "8616684942293508711", null, errorTarget);
      }
    }
    for (SNode actual : ListSequence.fromList(SLinkOperations.getTargets(iti, "templateActuals", true))) {
      SNode formal = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(targetClass, "template", true), "parameters", true)).getElement(SNodeOperations.getIndexInParent(actual));
      if (SNodeOperations.isInstanceOf(formal, "com.mbeddr.cpp.classes.structure.TemplateClassParameter")) {
        SNode tcp = SNodeOperations.cast(formal, "com.mbeddr.cpp.classes.structure.TemplateClassParameter");
        SNode expectedConceptRef = SLinkOperations.getTarget(tcp, "concept", true);
        SNode expectedConcept = SLinkOperations.getTarget(expectedConceptRef, "concept", false);
        if (expectedConceptRef != null) {
          if (SNodeOperations.isInstanceOf(actual, "com.mbeddr.cpp.classes.structure.ClassRefExpr")) {
            SNode argClass = SLinkOperations.getTarget(SNodeOperations.cast(actual, "com.mbeddr.cpp.classes.structure.ClassRefExpr"), "cls", false);
            if (!(ClassDeclaration_Behavior.call_declaresRealization_1022708226504868257(argClass, expectedConcept))) {
              TypingHelper th = new TypingHelper();
              List<String> errors = th.getConceptRealizationErrors(argClass, expectedConcept);
              if (ListSequence.fromList(errors).isNotEmpty()) {
                {
                  MessageTarget errorTarget = new NodeMessageTarget();
                  IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(actual, "does not realize the " + SPropertyOperations.getString(expectedConcept, "name") + ": " + ListSequence.fromList(errors).tailListSequence(1).foldLeft(ListSequence.fromList(errors).first(), new ILeftCombinator<String, String>() {
                    public String combine(String s, String it) {
                      return s + ", " + it;
                    }
                  }), "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "8616684942293463512", null, errorTarget);
                }
              }
            }
          }
          if (SNodeOperations.isInstanceOf(actual, "com.mbeddr.cpp.classes.structure.PrimitiveTypeRefExpr")) {
            if (SPropertyOperations.getBoolean(expectedConcept, "ordered") && !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(actual), "com.mbeddr.core.expressions.structure.IOrdered"))) {
              {
                MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(actual, "must be ordered", "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "3487377644351929204", null, errorTarget);
              }
            }
          }
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "com.mbeddr.cpp.classes.structure.ITemplateInstantiator";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
