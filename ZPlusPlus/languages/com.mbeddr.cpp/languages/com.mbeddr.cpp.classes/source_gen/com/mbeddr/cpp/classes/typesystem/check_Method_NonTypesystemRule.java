package com.mbeddr.cpp.classes.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import com.mbeddr.cpp.classes.behavior.MethodDeclaration_Behavior;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import com.mbeddr.cpp.classes.behavior.AbstractMethodDeclaration_Behavior;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import com.mbeddr.cpp.classes.behavior.IClassMember_Behavior;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.PropertyMessageTarget;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_Method_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Method_NonTypesystemRule() {
  }

  public void applyRule(final SNode m, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SLinkOperations.getTarget(m, "overriddenMethod", false) != null) {
      if (!(MethodDeclaration_Behavior.call_isInSyncWithOverriddenMethod_610576951245882520(m))) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(m, "not in sync with base method " + AbstractMethodDeclaration_Behavior.call_signaturePresentation_2015268598019204067(SLinkOperations.getTarget(m, "overriddenMethod", false)), "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "610576951245882921", null, errorTarget);
          {
            BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("com.mbeddr.cpp.classes.typesystem.fixSyncWithOverriddenMethod_QuickFix", false);
            intentionProvider.putArgument("method", m);
            _reporter_2309309498.addIntentionProvider(intentionProvider);
          }
        }
      }
      if (!(SPropertyOperations.getBoolean(SLinkOperations.getTarget(m, "overriddenMethod", false), "virtual"))) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(m, "cannot override non-virtual method", "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "610576951245901956", null, errorTarget);
        }
      }
    }

    Iterable<SNode> allMethods = Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), IClassMember_Behavior.call_owningClass_998890089994484960(m), "virtual_allMembersOfThisClassOnly_1022708226502685404", new Object[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "com.mbeddr.cpp.classes.structure.MethodDeclaration");
      }
    });
    Iterable<SNode> methodsWithSameSig = Sequence.fromIterable(allMethods).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return AbstractMethodDeclaration_Behavior.call_signaturePresentation_2015268598019204067(it).equals(AbstractMethodDeclaration_Behavior.call_signaturePresentation_2015268598019204067(m));
      }
    });

    if (Sequence.fromIterable(methodsWithSameSig).count() > 1) {
      for (SNode ms : Sequence.fromIterable(methodsWithSameSig)) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(ms, "duplicate method signatures " + AbstractMethodDeclaration_Behavior.call_signaturePresentation_2015268598019204067(m), "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "1488442383166449931", null, errorTarget);
        }
      }
    }

    Iterable<SNode> allFields = Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), IClassMember_Behavior.call_owningClass_998890089994484960(m), "virtual_allMembersOfThisClassOnly_1022708226502685404", new Object[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "com.mbeddr.cpp.classes.structure.Field");
      }
    });
    if (Sequence.fromIterable(allFields).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(it, "name").equals(SPropertyOperations.getString(m, "name"));
      }
    })) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        errorTarget = new PropertyMessageTarget("name");
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(m, "same name as field; not allowed", "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "3017602783213074799", null, errorTarget);
      }
    }



  }

  public String getApplicableConceptFQName() {
    return "com.mbeddr.cpp.classes.structure.MethodDeclaration";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
