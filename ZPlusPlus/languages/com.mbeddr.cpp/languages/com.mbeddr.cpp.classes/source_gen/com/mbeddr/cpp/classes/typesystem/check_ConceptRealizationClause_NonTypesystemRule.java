package com.mbeddr.cpp.classes.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_ConceptRealizationClause_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_ConceptRealizationClause_NonTypesystemRule() {
  }

  public void applyRule(final SNode crc, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode cls = SNodeOperations.cast(SNodeOperations.getParent(crc), "com.mbeddr.cpp.classes.structure.ClassDeclaration");
    TypingHelper th = new TypingHelper();
    for (SNode cr : ListSequence.fromList(SLinkOperations.getTargets(crc, "concepts", true))) {
      SNode concept = SLinkOperations.getTarget(cr, "concept", false);
      List<String> report = th.getConceptRealizationErrors(cls, concept);
      if (ListSequence.fromList(report).isNotEmpty()) {
        String reportString = ListSequence.fromList(report).tailListSequence(1).foldLeft(ListSequence.fromList(report).first(), new ILeftCombinator<String, String>() {
          public String combine(String s, String it) {
            return s + ", " + it;
          }
        });
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(cr, "class does not realize concept " + SPropertyOperations.getString(concept, "name") + ": " + reportString, "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "1022708226504378029", null, errorTarget);
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "com.mbeddr.cpp.classes.structure.ConceptRealizationClause";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
