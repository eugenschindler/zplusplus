package com.mbeddr.cpp.classes.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import com.mbeddr.cpp.classes.behavior.AbstractMethodDeclaration_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_IMethodOrConsCall_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_IMethodOrConsCall_NonTypesystemRule() {
  }

  public void applyRule(final SNode call, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(call), "com.mbeddr.cpp.classes.structure.OoDotOrArrowExpr")) {
      SNode dotOrArrow = SNodeOperations.cast(SNodeOperations.getParent(call), "com.mbeddr.cpp.classes.structure.OoDotOrArrowExpr");
      final SNode object = SLinkOperations.getTarget(dotOrArrow, "object", true);
      final boolean objectIsThis = SNodeOperations.isInstanceOf(object, "com.mbeddr.cpp.classes.structure.ThisExpression");
      SNode objectType;
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(object), "com.mbeddr.core.pointers.structure.PointerType")) {
        objectType = SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(object), "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true), "com.mbeddr.cpp.classes.structure.ClassifierType");
      } else {
        objectType = SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(object), "com.mbeddr.cpp.classes.structure.ClassifierType");
      }

      Iterable<SNode> overloads = BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), call, "virtual_findSuitableMethodOverloads_2015268598020361784", new Object[]{objectIsThis, objectType});
      if (Sequence.fromIterable(overloads).count() > 1) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(call, "more than one overload found" + Sequence.fromIterable(overloads).select(new ISelector<SNode, String>() {
            public String select(SNode it) {
              return ", " + AbstractMethodDeclaration_Behavior.call_signaturePresentation_2015268598019204067(it);
            }
          }), "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "1782955756756675440", null, errorTarget);
        }
      } else if (Sequence.fromIterable(overloads).count() == 0) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(call, "no overload found for types " + ListSequence.fromList(SLinkOperations.getTargets(call, "actuals", true)).select(new ISelector<SNode, SNode>() {
            public SNode select(SNode it) {
              return TypeChecker.getInstance().getTypeOf(it);
            }
          }), "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "1782955756756675460", null, errorTarget);
        }
      } else {
        if (SLinkOperations.getTarget(call, "methodOrConstructor", false) != Sequence.fromIterable(overloads).first()) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(call, "wrong overload", "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "1782955756756675491", null, errorTarget);
            {
              BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("com.mbeddr.cpp.classes.typesystem.fixSuitableOverload_QuickFix", true);
              intentionProvider.putArgument("call", call);
              intentionProvider.putArgument("newTarget", Sequence.fromIterable(overloads).first());
              _reporter_2309309498.addIntentionProvider(intentionProvider);
            }
          }
        }
      }
    }

  }

  public String getApplicableConceptFQName() {
    return "com.mbeddr.cpp.classes.structure.IMethodOrConsCall";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
