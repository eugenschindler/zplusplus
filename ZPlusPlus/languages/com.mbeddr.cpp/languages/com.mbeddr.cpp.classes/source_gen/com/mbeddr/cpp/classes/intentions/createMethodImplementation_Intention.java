package com.mbeddr.cpp.classes.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import com.mbeddr.cpp.classes.behavior.MethodDeclaration_Behavior;
import jetbrains.mps.intentions.IntentionDescriptor;

public class createMethodImplementation_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public createMethodImplementation_Intention() {
  }

  public String getConcept() {
    return "com.mbeddr.cpp.classes.structure.MethodDeclaration";
  }

  public String getPresentation() {
    return "createMethodImplementation";
  }

  public String getPersistentStateKey() {
    return "com.mbeddr.cpp.classes.intentions.createMethodImplementation_Intention";
  }

  public String getLanguageFqName() {
    return "com.mbeddr.cpp.classes";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:82dd6aa6-7b0e-4d3f-ac7e-a3ce4807a3b1(com.mbeddr.cpp.classes.intentions)", "1118251489465130342");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new createMethodImplementation_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Create Implementation";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      MethodDeclaration_Behavior.call_generateImplementation_158014820112639916(node);
    }

    public IntentionDescriptor getDescriptor() {
      return createMethodImplementation_Intention.this;
    }
  }
}
