package com.mbeddr.cpp.classes.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.textGen.TraceInfoGenerationUtil;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import com.mbeddr.cpp.classes.behavior.IClassMember_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.textGen.TextGenManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.apache.log4j.Priority;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ConstructorCallExpression_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    if (getBuffer().hasPositionsSupport()) {
      TraceInfoGenerationUtil.createPositionInfo(this, node);
    }

    this.append(BehaviorReflection.invokeVirtual(String.class, IClassMember_Behavior.call_owningClass_998890089994484960(SLinkOperations.getTarget(node, "methodOrConstructor", false)), "virtual_getFullNamespaceName_2981142171761304257", new Object[]{}));

    this.append("(");
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "actuals", true)).isNotEmpty()) {
      for (SNode item : SLinkOperations.getTargets(node, "actuals", true)) {
        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());
        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, "actuals", true)).last()) {
          this.append(", ");
        }
      }
    }
    this.append(")");
    if (getBuffer().hasPositionsSupport()) {
      {
        String traceableProperty = "";
        try {
          traceableProperty = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, "jetbrains.mps.lang.traceable.structure.TraceableConcept"), "virtual_getTraceableProperty_5067982036267369901", new Object[]{});
        } catch (Throwable t) {
          if (LOG.isEnabledFor(Priority.ERROR)) {
            LOG.error("Can't calculate traceable prorerty for a node " + node + ".", t);
          }
        }
        TraceInfoGenerationUtil.fillPositionInfo(this, node, traceableProperty);
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(ConstructorCallExpression_TextGen.class);
}
