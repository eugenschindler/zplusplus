package com.mbeddr.cpp.classes.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class AbstractMethodDeclaration_Behavior {
  public static void init(SNode thisNode) {
  }

  public static String call_presentedName_4157133445514992957(SNode thisNode) {
    return AbstractMethodDeclaration_Behavior.call_fullName_6970149437188700298(thisNode);
  }

  public static String call_fullName_6970149437188700298(SNode thisNode) {
    return AbstractMethodDeclaration_Behavior.call_fullClassName_6970149437188926849(thisNode) + "::" + SPropertyOperations.getString(thisNode, "name");
  }

  public static String call_fullClassName_6970149437188926849(SNode thisNode) {
    return BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getAncestor(thisNode, "com.mbeddr.cpp.classes.structure.ClassDeclaration", false, false), "virtual_getFullNamespaceName_2981142171761304257", new Object[]{});
  }

  public static String call_fullPresentedNameWithSignature_1118251489464943161(SNode thisNode) {
    return AbstractMethodDeclaration_Behavior.call_fullClassName_6970149437188926849(thisNode) + "::" + AbstractMethodDeclaration_Behavior.call_signaturePresentation_2015268598019204067(thisNode);
  }

  public static String call_className_2180443106057763910(SNode thisNode) {
    return SPropertyOperations.getString(SNodeOperations.getAncestor(thisNode, "com.mbeddr.cpp.classes.structure.ClassDeclaration", false, false), "name");
  }

  public static String call_presentedNameWithSignature_2180443106057763905(SNode thisNode) {
    return AbstractMethodDeclaration_Behavior.call_className_2180443106057763910(thisNode) + "::" + AbstractMethodDeclaration_Behavior.call_signaturePresentation_2015268598019204067(thisNode);
  }

  public static String call_internalName_4157133445514993001(SNode thisNode) {
    final Wrappers._T<String> argstring = new Wrappers._T<String>("");
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "args", true)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        argstring.value += "_" + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(it, "type", true)), "name");
      }
    });
    return SNodeOperations.getAncestor(thisNode, "com.mbeddr.cpp.classes.structure.ClassDeclaration", false, false) + "__" + SPropertyOperations.getString(thisNode, "name") + "_" + argstring.value;
  }

  public static String virtual_getPresentation_1213877396640(SNode thisNode) {
    MethodsBehaviorDebug.debug("AbstractMethod getPresentation called");
    return AbstractMethodDeclaration_Behavior.call_fullName_6970149437188700298(thisNode);
  }

  public static String call_signaturePresentation_2015268598019204067(SNode thisNode) {
    StringBuilder b = new StringBuilder();
    b.append(SPropertyOperations.getString(thisNode, "name") + "(");
    for (SNode a : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "args", true))) {
      if (SNodeOperations.getIndexInParent(a) > 0) {
        b.append(", ");
      }
      b.append(BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(a, "type", true), "virtual_getPresentation_1213877396640", new Object[]{}));
    }
    b.append(")");
    return b.toString();
  }

  public static int call_minSuppliedArgCount_610576951245963101(SNode thisNode) {
    for (SNode arg : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "args", true))) {
      if (SLinkOperations.getTarget(arg, "defaultValue", true) != null) {
        return SNodeOperations.getIndexInParent(arg);
      }
    }
    return ListSequence.fromList(SLinkOperations.getTargets(thisNode, "args", true)).count();
  }

  public static int call_maxSuppliedArgCount_610576951245963106(SNode thisNode) {
    return ListSequence.fromList(SLinkOperations.getTargets(thisNode, "args", true)).count();
  }

  public static boolean call_isVirtual_487313117837031879(SNode thisNode) {
    return SPropertyOperations.getBoolean(thisNode, "virtual");
  }
}
