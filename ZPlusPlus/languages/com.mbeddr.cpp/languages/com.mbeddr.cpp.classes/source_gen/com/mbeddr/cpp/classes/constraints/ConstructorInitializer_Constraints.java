package com.mbeddr.cpp.classes.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import com.mbeddr.cpp.classes.behavior.IClassMember_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.mbeddr.cpp.classes.behavior.ClassDeclaration_Behavior;
import org.apache.log4j.Priority;
import com.mbeddr.cpp.classes.behavior.ICppMemberVisibilityStrategy;
import com.mbeddr.cpp.classes.behavior.VisibilityStrategyFactory;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.SNodePointer;

public class ConstructorInitializer_Constraints extends BaseConstraintsDescriptor {
  public ConstructorInitializer_Constraints() {
    super("com.mbeddr.cpp.classes.structure.ConstructorInitializer");
  }

  @Override
  public boolean hasOwnCanBeParentMethod() {
    return true;
  }

  @Override
  public boolean canBeParent(SNode node, @Nullable SNode childNode, SNode childConcept, SNode link, IOperationContext operationContext, @Nullable CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAParent(node, childNode, childConcept, link, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeParentBreakingPoint);
    }

    return result;
  }

  public static boolean static_canBeAParent(SNode node, SNode childNode, SNode childConcept, SNode link, final IOperationContext operationContext) {

    DebugConstructorInitializerConcept.debug("Can be parent check started");

    if (childNode == null || childConcept == null) {
      DebugConstructorInitializerConcept.debug("Child node or concept is null");
      return true;
    }


    if (!(childNode instanceof SNode)) {
      DebugConstructorInitializerConcept.debug("Child node is not a constructor call expression");
      return true;
    }



    SNode constructorCall = SNodeOperations.cast(childNode, "com.mbeddr.cpp.classes.structure.ConstructorCallExpression");

    SNode currentConstructorImplementation = SNodeOperations.getAncestor(node, "com.mbeddr.cpp.classes.structure.ConstructorImplementation", false, false);

    if (currentConstructorImplementation == null) {
      DebugConstructorInitializerConcept.debug("Constructor implementation is null");
      return true;
    }

    SNode accessingClass = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), currentConstructorImplementation, "virtual_getOwningClass_610576951245971853", new Object[]{});
    SNode constructedBaseClass = IClassMember_Behavior.call_owningClass_998890089994484960(SLinkOperations.getTarget(constructorCall, "methodOrConstructor", false));

    DebugConstructorInitializerConcept.debug("Accessing class: " + accessingClass);
    DebugConstructorInitializerConcept.debug("Constructed base class: " + constructedBaseClass);

    if ((boolean) Sequence.fromIterable(ClassDeclaration_Behavior.call_getAllBaseClasses_5516725038417419344(accessingClass)).contains(constructedBaseClass) == false) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("Constructed class " + constructedBaseClass + " is not a base class of " + accessingClass);
      }
      return false;
    }

    if (constructedBaseClass == null) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("Constructed base class not specified");
      }
      return false;
    }

    ICppMemberVisibilityStrategy strategy = VisibilityStrategyFactory.getStrategy();

    Iterable<SNode> availableConstructors = Sequence.fromIterable(strategy.getVisibleInsideAnotherClassMembers(constructedBaseClass, accessingClass)).ofType(SNode.class);

    DebugConstructorInitializerConcept.debug("Available constructors by strategy: " + availableConstructors);

    DebugConstructorInitializerConcept.debug("The constructor in expression: " + SLinkOperations.getTarget(constructorCall, "methodOrConstructor", false));

    if (!(Sequence.fromIterable(availableConstructors).contains(SLinkOperations.getTarget(constructorCall, "methodOrConstructor", false)))) {
      DebugConstructorInitializerConcept.debug("Not available!");
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("The constructor " + constructorCall + " is not available here");
      }
      return false;
    }

    DebugConstructorInitializerConcept.debug("Available - OK");
    return true;
  }

  protected static Logger LOG = LogManager.getLogger(ConstructorInitializer_Constraints.class);
  private static SNodePointer canBeParentBreakingPoint = new SNodePointer("r:5713504b-b269-4946-8fca-49fcca934ac1(com.mbeddr.cpp.classes.constraints)", "7383050172660459217");
}
