package com.mbeddr.cpp.classes.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;

public class BehaviorAspectDescriptor implements jetbrains.mps.smodel.runtime.BehaviorAspectDescriptor {
  public BehaviorAspectDescriptor() {
  }

  public BehaviorDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0b, fqName)) {
      case 2:
        return new ClassDeclaration_BehaviorDescriptor();
      case 31:
        return new MethodDeclaration_BehaviorDescriptor();
      case 32:
        return new MethodImplementation_BehaviorDescriptor();
      case 30:
        return new MethodArgument_BehaviorDescriptor();
      case 23:
        return new Field_BehaviorDescriptor();
      case 3:
        return new ClassRef_BehaviorDescriptor();
      case 5:
        return new ClassifierType_BehaviorDescriptor();
      case 35:
        return new NewExpression_BehaviorDescriptor();
      case 37:
        return new OoDotExpression_BehaviorDescriptor();
      case 38:
        return new OoFieldAccess_BehaviorDescriptor();
      case 36:
        return new OoArrowExpression_BehaviorDescriptor();
      case 13:
        return new ConstructorCallExpression_BehaviorDescriptor();
      case 39:
        return new OoMethodCall_BehaviorDescriptor();
      case 53:
        return new ThisExpression_BehaviorDescriptor();
      case 14:
        return new ConstructorDeclaration_BehaviorDescriptor();
      case 21:
        return new DestructorDeclaration_BehaviorDescriptor();
      case 20:
        return new DeleteStatement_BehaviorDescriptor();
      case 47:
        return new SafeDeleteStatement_BehaviorDescriptor();
      case 15:
        return new ConstructorImplementation_BehaviorDescriptor();
      case 22:
        return new DestructorImplementation_BehaviorDescriptor();
      case 49:
        return new Template_BehaviorDescriptor();
      case 51:
        return new TemplateParamType_BehaviorDescriptor();
      case 50:
        return new TemplateClassParameter_BehaviorDescriptor();
      case 52:
        return new TemplatePrimitiveParameter_BehaviorDescriptor();
      case 42:
        return new PrimitiveTemplateParamRef_BehaviorDescriptor();
      case 4:
        return new ClassRefExpr_BehaviorDescriptor();
      case 6:
        return new Concept_BehaviorDescriptor();
      case 8:
        return new ConceptRef_BehaviorDescriptor();
      case 7:
        return new ConceptRealizationClause_BehaviorDescriptor();
      case 46:
        return new PublicMemberList_BehaviorDescriptor();
      case 45:
        return new ProtectedMemberList_BehaviorDescriptor();
      case 44:
        return new PrivateMemberList_BehaviorDescriptor();
      case 43:
        return new PrimitiveTypeRefExpr_BehaviorDescriptor();
      case 25:
        return new FieldInitializer_BehaviorDescriptor();
      case 29:
        return new InheritanceDefinition_BehaviorDescriptor();
      case 16:
        return new ConstructorInitializer_BehaviorDescriptor();
      case 27:
        return new FriendFunctionDeclaration_BehaviorDescriptor();
      case 26:
        return new FriendClassDeclaration_BehaviorDescriptor();
      case 40:
        return new OperatorOverloadingDeclaration_BehaviorDescriptor();
      case 41:
        return new PlusOperatorDesignator_BehaviorDescriptor();
      case 33:
        return new MinusOperatorDesignator_BehaviorDescriptor();
      case 28:
        return new IndexExpression_BehaviorDescriptor();
      case 48:
        return new SquareBracketsOperatorDesignator_BehaviorDescriptor();
      case 0:
        return new AsExpression_BehaviorDescriptor();
      case 17:
        return new Cout_BehaviorDescriptor();
      case 1:
        return new AssignmentOperatorDesignator_BehaviorDescriptor();
      case 18:
        return new CppNamingConventions_BehaviorDescriptor();
      case 34:
        return new NewArrayExpression_BehaviorDescriptor();
      case 19:
        return new DeleteArrayStatement_BehaviorDescriptor();
      case 9:
        return new ConceptRestrictedTemplateParameter_BehaviorDescriptor();
      case 12:
        return new ConceptType_BehaviorDescriptor();
      case 10:
        return new ConceptRestrictedTemplateParameterType_BehaviorDescriptor();
      case 24:
        return new FieldAccessExpression_BehaviorDescriptor();
      case 11:
        return new ConceptRestrictedTypeRefExpr_BehaviorDescriptor();
      default:
        return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
    }
  }

  private static String[] stringSwitchCases_846f5o_a0a0b = new String[]{"com.mbeddr.cpp.classes.structure.AsExpression", "com.mbeddr.cpp.classes.structure.AssignmentOperatorDesignator", "com.mbeddr.cpp.classes.structure.ClassDeclaration", "com.mbeddr.cpp.classes.structure.ClassRef", "com.mbeddr.cpp.classes.structure.ClassRefExpr", "com.mbeddr.cpp.classes.structure.ClassifierType", "com.mbeddr.cpp.classes.structure.Concept", "com.mbeddr.cpp.classes.structure.ConceptRealizationClause", "com.mbeddr.cpp.classes.structure.ConceptRef", "com.mbeddr.cpp.classes.structure.ConceptRestrictedTemplateParameter", "com.mbeddr.cpp.classes.structure.ConceptRestrictedTemplateParameterType", "com.mbeddr.cpp.classes.structure.ConceptRestrictedTypeRefExpr", "com.mbeddr.cpp.classes.structure.ConceptType", "com.mbeddr.cpp.classes.structure.ConstructorCallExpression", "com.mbeddr.cpp.classes.structure.ConstructorDeclaration", "com.mbeddr.cpp.classes.structure.ConstructorImplementation", "com.mbeddr.cpp.classes.structure.ConstructorInitializer", "com.mbeddr.cpp.classes.structure.Cout", "com.mbeddr.cpp.classes.structure.CppNamingConventions", "com.mbeddr.cpp.classes.structure.DeleteArrayStatement", "com.mbeddr.cpp.classes.structure.DeleteStatement", "com.mbeddr.cpp.classes.structure.DestructorDeclaration", "com.mbeddr.cpp.classes.structure.DestructorImplementation", "com.mbeddr.cpp.classes.structure.Field", "com.mbeddr.cpp.classes.structure.FieldAccessExpression", "com.mbeddr.cpp.classes.structure.FieldInitializer", "com.mbeddr.cpp.classes.structure.FriendClassDeclaration", "com.mbeddr.cpp.classes.structure.FriendFunctionDeclaration", "com.mbeddr.cpp.classes.structure.IndexExpression", "com.mbeddr.cpp.classes.structure.InheritanceDefinition", "com.mbeddr.cpp.classes.structure.MethodArgument", "com.mbeddr.cpp.classes.structure.MethodDeclaration", "com.mbeddr.cpp.classes.structure.MethodImplementation", "com.mbeddr.cpp.classes.structure.MinusOperatorDesignator", "com.mbeddr.cpp.classes.structure.NewArrayExpression", "com.mbeddr.cpp.classes.structure.NewExpression", "com.mbeddr.cpp.classes.structure.OoArrowExpression", "com.mbeddr.cpp.classes.structure.OoDotExpression", "com.mbeddr.cpp.classes.structure.OoFieldAccess", "com.mbeddr.cpp.classes.structure.OoMethodCall", "com.mbeddr.cpp.classes.structure.OperatorOverloadingDeclaration", "com.mbeddr.cpp.classes.structure.PlusOperatorDesignator", "com.mbeddr.cpp.classes.structure.PrimitiveTemplateParamRef", "com.mbeddr.cpp.classes.structure.PrimitiveTypeRefExpr", "com.mbeddr.cpp.classes.structure.PrivateMemberList", "com.mbeddr.cpp.classes.structure.ProtectedMemberList", "com.mbeddr.cpp.classes.structure.PublicMemberList", "com.mbeddr.cpp.classes.structure.SafeDeleteStatement", "com.mbeddr.cpp.classes.structure.SquareBracketsOperatorDesignator", "com.mbeddr.cpp.classes.structure.Template", "com.mbeddr.cpp.classes.structure.TemplateClassParameter", "com.mbeddr.cpp.classes.structure.TemplateParamType", "com.mbeddr.cpp.classes.structure.TemplatePrimitiveParameter", "com.mbeddr.cpp.classes.structure.ThisExpression"};
}
