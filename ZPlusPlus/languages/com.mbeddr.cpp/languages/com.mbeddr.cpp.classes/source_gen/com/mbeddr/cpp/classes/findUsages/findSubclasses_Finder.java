package com.mbeddr.cpp.classes.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SearchScope;
import java.util.List;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class findSubclasses_Finder extends GeneratedFinder {
  private static Logger LOG = LogManager.getLogger("com.mbeddr.cpp.classes.findUsages.findSubclasses_Finder");

  public findSubclasses_Finder() {
  }

  @Override
  public String getDescription() {
    return "Subclasses";
  }

  @Override
  public String getLongDescription() {
    return "";
  }

  @Override
  public String getConcept() {
    return "com.mbeddr.cpp.classes.structure.ClassDeclaration";
  }

  @Override
  protected void doFind(SNode node, SearchScope scope, final List<SNode> _results, ProgressMonitor monitor) {
    monitor.start(getDescription(), 1);
    try {
      List<SNode> nodes = FindUtils.executeFinder("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder", node, scope, monitor.subTask(1));
      ListSequence.fromList(nodes).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          if (SNodeOperations.isInstanceOf(it, "com.mbeddr.cpp.classes.structure.ClassRef")) {
            ListSequence.fromList(_results).addElement(it);
          }
        }
      });
    } finally {
      monitor.done();
    }
  }

  @Override
  public void getSearchedNodes(SNode node, SearchScope scope, List<SNode> _results) {
  }

  @Override
  public String getNodeCategory(SNode node) {
    return "OO";
  }
}
