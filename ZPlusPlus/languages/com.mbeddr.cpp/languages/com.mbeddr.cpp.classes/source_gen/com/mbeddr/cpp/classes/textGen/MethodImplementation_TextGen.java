package com.mbeddr.cpp.classes.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.textGen.TraceInfoGenerationUtil;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.textGen.TextGenManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.mbeddr.cpp.classes.behavior.TemplatesDebugHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.apache.log4j.Priority;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MethodImplementation_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    if (getBuffer().hasPositionsSupport()) {
      TraceInfoGenerationUtil.createPositionInfo(this, node);
    }

    if (BehaviorReflection.invokeVirtual(Boolean.TYPE, node, "virtual_residesInTemplateContext_998890089994455159", new Object[]{})) {

      this.append("template < ");

      if (Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), node, "virtual_getAllTemplateParameters_7069250747273260302", new Object[]{})).isNotEmpty()) {
        for (SNode item : BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), node, "virtual_getAllTemplateParameters_7069250747273260302", new Object[]{})) {
          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());
          if (item != Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), node, "virtual_getAllTemplateParameters_7069250747273260302", new Object[]{})).last()) {
            this.append(", ");
          }
        }
      }

      this.append(" >");
      this.appendNewLine();
    }

    SNode theType = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "method", false), "type", true);

    while (SNodeOperations.isInstanceOf(theType, "com.mbeddr.cpp.cext.structure.ReferenceType") || SNodeOperations.isInstanceOf(theType, "com.mbeddr.core.pointers.structure.PointerType")) {
      if (SNodeOperations.isInstanceOf(theType, "com.mbeddr.cpp.cext.structure.ReferenceType")) {
        theType = SLinkOperations.getTarget(SNodeOperations.as(theType, "com.mbeddr.cpp.cext.structure.ReferenceType"), "baseType", true);
      } else if (SNodeOperations.isInstanceOf(theType, "com.mbeddr.core.pointers.structure.PointerType")) {
        theType = SLinkOperations.getTarget(SNodeOperations.as(theType, "com.mbeddr.core.pointers.structure.PointerType"), "baseType", true);
      }
    }

    if (SNodeOperations.isInstanceOf(theType, "com.mbeddr.cpp.classes.structure.ClassifierType")) {
      TemplatesDebugHelper.debug("Class type found as method return type: " + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(theType, "com.mbeddr.cpp.classes.structure.ClassifierType"), "cls", false), "name"));
      if (BehaviorReflection.invokeVirtual(Boolean.TYPE, SLinkOperations.getTarget(SNodeOperations.as(theType, "com.mbeddr.cpp.classes.structure.ClassifierType"), "cls", false), "virtual_residesInTemplateContext_998890089994455159", new Object[]{})) {
        this.append("typename ");
      } else {
        TemplatesDebugHelper.debug("not templatized");
      }
    }
    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "method", false), "type", true), this.getSNode());
    this.append(" ");
    this.append(BehaviorReflection.invokeVirtual(String.class, node, "virtual_presentedName_6970149437188808803", new Object[]{}));
    this.append("(");
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "arguments", true)).isNotEmpty()) {
      for (SNode item : SLinkOperations.getTargets(node, "arguments", true)) {
        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());
        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, "arguments", true)).last()) {
          this.append(", ");
        }
      }
    }
    this.append(") ");
    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "body", true), this.getSNode());
    this.appendNewLine();
    if (getBuffer().hasPositionsSupport()) {
      {
        String traceableProperty = "";
        try {
          traceableProperty = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, "jetbrains.mps.lang.traceable.structure.TraceableConcept"), "virtual_getTraceableProperty_5067982036267369901", new Object[]{});
        } catch (Throwable t) {
          if (LOG.isEnabledFor(Priority.ERROR)) {
            LOG.error("Can't calculate traceable prorerty for a node " + node + ".", t);
          }
        }
        TraceInfoGenerationUtil.fillPositionInfo(this, node, traceableProperty);
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(MethodImplementation_TextGen.class);
}
