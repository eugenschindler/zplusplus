package com.mbeddr.cpp.classes.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ArgUtil {
  public static SNode makeTypeForClass(SNode cls) {
    SNode clsType = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.ClassifierType", null);
    SLinkOperations.setTarget(clsType, "cls", cls, false);
    return clsType;
  }

  public static SNode makeRefType(SNode type) {
    SNode refType = SConceptOperations.createNewNode("com.mbeddr.cpp.cext.structure.ReferenceType", null);
    SLinkOperations.setTarget(refType, "baseType", type, true);
    return refType;
  }

  public static SNode makeConstRefType(SNode type) {
    SNode refType = makeRefType(type);
    SPropertyOperations.set(refType, "const", "" + (true));
    return refType;
  }

  public static SNode makeClassRefType(SNode cls) {
    return makeRefType(makeTypeForClass(cls));
  }

  public static SNode makeClassConstRefType(SNode cls) {
    return makeConstRefType(makeTypeForClass(cls));
  }

  public static SNode makeMethodArgument(SNode type, String name) {
    SNode arg = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.MethodArgument", null);
    SLinkOperations.setTarget(arg, "type", type, true);
    SPropertyOperations.set(arg, "name", name);
    return arg;
  }
}
