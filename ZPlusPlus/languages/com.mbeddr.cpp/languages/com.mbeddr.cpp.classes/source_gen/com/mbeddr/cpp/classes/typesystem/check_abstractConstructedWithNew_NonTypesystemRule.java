package com.mbeddr.cpp.classes.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_abstractConstructedWithNew_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_abstractConstructedWithNew_NonTypesystemRule() {
  }

  public void applyRule(final SNode newExpression, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {

    SNode constructorCallExpression = SNodeOperations.as(SLinkOperations.getTarget(newExpression, "creator", true), "com.mbeddr.cpp.classes.structure.ConstructorCallExpression");

    if ((constructorCallExpression != null)) {

      SNode theClassifier = SNodeOperations.getAncestor(SLinkOperations.getTarget(constructorCallExpression, "methodOrConstructor", false), "com.mbeddr.cpp.classes.structure.Classifier", false, false);

      if (HelperAbstractClassType.isAbstractClass(theClassifier)) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(newExpression, "Can not create an abstract class instance", "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "3803030444639669392", null, errorTarget);
        }
      }


    }

  }

  public String getApplicableConceptFQName() {
    return "com.mbeddr.cpp.classes.structure.NewExpression";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
