package com.mbeddr.cpp.classes.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_ThisExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_ThisExpression_InferenceRule() {
  }

  public void applyRule(final SNode te, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode pt = SConceptOperations.createNewNode("com.mbeddr.core.pointers.structure.PointerType", null);
    SNode ct = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.ClassifierType", null);

    SLinkOperations.setTarget(ct, "cls", BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.getAncestor(te, "com.mbeddr.cpp.classes.structure.IThisContainer", false, false), "virtual_getOwningClass_610576951245971853", new Object[]{}), false);


    if (BehaviorReflection.invokeVirtual(Boolean.TYPE, SLinkOperations.getTarget(ct, "cls", false), "virtual_residesInTemplateContext_998890089994455159", new Object[]{})) {

      for (SNode parameter : BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), SLinkOperations.getTarget(ct, "cls", false), "virtual_getAllTemplateParameters_7069250747273260302", new Object[]{})) {

        SNode expre = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.ConceptRestrictedTypeRefExpr", null);
        SNode type = SConceptOperations.createNewNode("com.mbeddr.cpp.classes.structure.ConceptRestrictedTemplateParameterType", null);
        SLinkOperations.setTarget(type, "parameter", SNodeOperations.as(parameter, "com.mbeddr.cpp.classes.structure.ConceptRestrictedTemplateParameter"), false);
        SLinkOperations.setTarget(expre, "Type", type, true);
        ListSequence.fromList(SLinkOperations.getTargets(ct, "templateActuals", true)).addElement(expre);
      }

      SLinkOperations.getTargets(ct, "templateActuals", true);
    }


    SLinkOperations.setTarget(pt, "baseType", ct, true);
    {
      SNode _nodeToCheck_1029348928467 = te;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "2015268598018507672", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:4349c8f7-b26d-48ef-9bad-3a0e52db38d6(com.mbeddr.cpp.classes.typesystem)", "2015268598018507606", true), (SNode) pt, _info_12389875345);
    }
  }

  public String getApplicableConceptFQName() {
    return "com.mbeddr.cpp.classes.structure.ThisExpression";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
